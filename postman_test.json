{
  "info": {
    "_postman_id": "b618def3-5e83-41ef-8dcc-4845d6719f4a",
    "name": "Mock Project Test",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const Ajv = require('ajv');",
                  "const ajv = new Ajv();",
                  "",
                  "const schema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"status\": { \"type\": \"string\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "    },",
                  "    \"required\": [\"status\", \"message\"]",
                  "};",
                  "",
                  "const validate = ajv.compile(schema);",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Schema is valid', function () {",
                  "    const valid = validate(jsonData)",
                  "    if (!valid) console.log(validate.errors)",
                  "    pm.expect(valid).to.be.true;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"customer103\",\n    \"password\": \"Pass@1234\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/products",
              "host": ["{{host}}"],
              "path": ["products"]
            }
          },
          "response": []
        },
        {
          "name": "Login - validate failed",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const Ajv = require('ajv');",
                  "const ajv = new Ajv();",
                  "",
                  "const schema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"error\": { \"type\": \"string\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"validation\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"query\": {",
                  "                    \"type\": \"object\",",
                  "                    \"properties\": {",
                  "                        \"source\": { \"type\": \"string\" },",
                  "                        \"keys\": { \"type\": \"array\" },",
                  "                        \"message\": { \"type\": \"string\" },",
                  "                    },",
                  "                },",
                  "                \"body\": {",
                  "                    \"type\": \"object\",",
                  "                    \"properties\": {",
                  "                        \"source\": { \"type\": \"string\" },",
                  "                        \"keys\": { \"type\": \"array\" },",
                  "                        \"message\": { \"type\": \"string\" },",
                  "                    },",
                  "                },",
                  "                \"params\": {",
                  "                    \"type\": \"object\",",
                  "                    \"properties\": {",
                  "                        \"source\": { \"type\": \"string\" },",
                  "                        \"keys\": { \"type\": \"array\" },",
                  "                        \"message\": { \"type\": \"string\" },",
                  "                    },",
                  "                },",
                  "            },",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                  "};",
                  "",
                  "const validate = ajv.compile(schema);",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Schema is valid', function () {",
                  "    const valid = validate(jsonData)",
                  "    if (!valid) console.log(validate.errors)",
                  "    pm.expect(valid).to.be.true;",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"customer103\",\n    \"password\": \"Pass@1234\",\n    \"a\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/login",
              "host": ["{{host}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Login - wrong email or password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const Ajv = require('ajv');",
                  "const ajv = new Ajv();",
                  "",
                  "const schemaLoginFailed = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"status\": { \"type\": \"string\" },",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"status\", \"message\"]",
                  "};",
                  "",
                  "const validate = ajv.compile(schemaLoginFailed);",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Failed status schema is valid', function () {",
                  "    const valid = validate(jsonData)",
                  "    if (!valid) console.log(validate.errors)",
                  "    pm.expect(valid).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"customer1031111\",\n    \"password\": \"Pass@1234\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/login",
              "host": ["{{host}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Login, generate token - OK",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const Ajv = require('ajv');",
                  "const ajv = new Ajv();",
                  "",
                  "const schema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"status\": { \"type\": \"string\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"token\": { \"type\": \"string\" },",
                  "    },",
                  "    \"required\": [\"status\", \"message\"]",
                  "};",
                  "",
                  "const validate = ajv.compile(schema);",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Schema is valid', function () {",
                  "    const valid = validate(jsonData)",
                  "    if (!valid) console.log(validate.errors)",
                  "    pm.expect(valid).to.be.true;",
                  "});",
                  "",
                  "pm.test('token has 3 parts', function (){",
                  "    const t = jsonData.token.split('.');",
                  "",
                  "    pm.expect(t.length).to.eql(3);",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"tokenAuth\", jsonData.token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"customer103\",\n    \"password\": \"Pass@1234\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/login",
              "host": ["{{host}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Forbidden",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const Ajv = require('ajv');",
                  "const ajv = new Ajv();",
                  "",
                  "const schema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"status\": { \"type\": \"string\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "    },",
                  "    \"required\": [\"status\", \"message\"]",
                  "};",
                  "",
                  "const validate = ajv.compile(schema);",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Schema is valid', function () {",
                  "    const valid = validate(jsonData)",
                  "    if (!valid) console.log(validate.errors)",
                  "    pm.expect(valid).to.be.true;",
                  "});",
                  "",
                  "pm.test('Should correct message', function (){",
                  "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tokenAuth}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"customer103\",\n    \"password\": \"Pass@1234\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/offices",
              "host": ["{{host}}"],
              "path": ["offices"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin - delete user 6 & customer 497 after test",
      "item": [
        {
          "name": "register & login",
          "item": [
            {
              "name": "URL not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/abc",
                  "host": ["{{host}}"],
                  "path": ["abc"]
                }
              },
              "response": []
            },
            {
              "name": "Login - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"admin111\",\n    \"password\": \"Pass@1234\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Login - wrong login info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schemaLoginFailed = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schemaLoginFailed);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Failed status schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"admin111\",\n    \"password\": \"Pass@1234\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Login - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"token\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('token has 3 parts', function (){",
                      "    const t = jsonData.token.split('.');",
                      "",
                      "    pm.expect(t.length).to.eql(3);",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"token\", jsonData.token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"admin\",\n    \"password\": \"Pass@1234\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Register - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 114,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": \"asb\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - data ref not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test1\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 1191111\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test1\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 121\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test1\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 121\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "offices",
          "item": [
            {
              "name": "Get all offices - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"total\": { \"type\": \"number\" },",
                      "        \"Offices\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"officeCode\": { \"type\": 'string', \"maxLength\": 10 },",
                      "                    \"city\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                    \"phone\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                    \"addressLine1\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                    \"addressLine2\": { \"type\": ['string', 'null'], \"maxLength\": 50 },",
                      "                    \"state\": { \"type\": ['string', 'null'], \"maxLength\": 50 },",
                      "                    \"country\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                    \"postalCode\": { \"type\": 'string', \"maxLength\": 15 },",
                      "                    \"territory\": { \"type\": 'string', \"maxLength\": 10 },",
                      "                },",
                      "                required: [",
                      "                    \"officeCode\",",
                      "                    \"city\",",
                      "                    \"phone\",",
                      "                    \"addressLine1\",",
                      "                    \"country\",",
                      "                    \"postalCode\",",
                      "                    \"territory\"",
                      "                ]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"message\", \"total\", \"Offices\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Total data must be equal the length of offices's data\", function () {",
                      "    pm.expect(jsonData.total).to.eql(jsonData.Offices.length);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Create office - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"officeCode\": \"8\",\n    \"city\": \"London\",\n    \"phone\": \"+44 20 7877 2041\",\n    \"addressLine1\": \"25 Old Broad Street\",\n    \"addressLine2\": \"Level 7\",\n    \"state\": null,\n    \"country\": \"UK\",\n    \"postalCode\": \"EC2N 1HN\",\n    \"territory\": \"EMEA\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Create office - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"officeCode\": 8,\n    \"city\": 1,\n    \"phone\": \"+44 20 7877 2041\",\n    \"addressLine1\": \"25 Old Broad Street\",\n    \"addressLine2\": \"Level 7\",\n    \"state\": null,\n    \"country\": \"UK\",\n    \"postalCode\": \"EC2N 1HN\",\n    \"territory\": \"EMEA\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Create office - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"office\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"officeCode\": { \"type\": 'string', \"maxLength\": 10 },",
                      "                \"city\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"phone\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"addressLine1\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"addressLine2\": { \"type\": ['string', 'null'], \"maxLength\": 50 },",
                      "                \"state\": { \"type\": ['string', 'null'], \"maxLength\": 50 },",
                      "                \"country\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"postalCode\": { \"type\": 'string', \"maxLength\": 15 },",
                      "                \"territory\": { \"type\": 'string', \"maxLength\": 10 },",
                      "            },",
                      "            required: [",
                      "                \"officeCode\",",
                      "                \"city\",",
                      "                \"phone\",",
                      "                \"addressLine1\",",
                      "                \"country\",",
                      "                \"postalCode\",",
                      "                \"territory\"",
                      "            ]",
                      "        }",
                      "    },",
                      "    \"required\": [\"message\", \"office\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"officeCode\": \"8\",\n    \"city\": \"London\",\n    \"phone\": \"+44 20 7877 2041\",\n    \"addressLine1\": \"25 Old Broad Street\",\n    \"addressLine2\": \"Level 7\",\n    \"state\": null,\n    \"country\": \"UK\",\n    \"postalCode\": \"EC2N 1HN\",\n    \"territory\": \"EMEA\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Create office - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"officeCode\": \"8\",\n    \"city\": \"London\",\n    \"phone\": \"+44 20 7877 2041\",\n    \"addressLine1\": \"25 Old Broad Street\",\n    \"addressLine2\": \"Level 7\",\n    \"state\": null,\n    \"country\": \"UK\",\n    \"postalCode\": \"EC2N 1HN\",\n    \"territory\": \"EMEA\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Get office by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    a\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/8",
                  "host": ["{{host}}"],
                  "path": ["offices", "8"]
                }
              },
              "response": []
            },
            {
              "name": "Get office by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"office\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"officeCode\": { \"type\": 'string', \"maxLength\": 10 },",
                      "                \"city\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"phone\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"addressLine1\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"addressLine2\": { \"type\": ['string', 'null'], \"maxLength\": 50 },",
                      "                \"state\": { \"type\": ['string', 'null'], \"maxLength\": 50 },",
                      "                \"country\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"postalCode\": { \"type\": 'string', \"maxLength\": 15 },",
                      "                \"territory\": { \"type\": 'string', \"maxLength\": 10 },",
                      "            },",
                      "            required: [",
                      "                \"officeCode\",",
                      "                \"city\",",
                      "                \"phone\",",
                      "                \"addressLine1\",",
                      "                \"country\",",
                      "                \"postalCode\",",
                      "                \"territory\"",
                      "            ]",
                      "        }",
                      "    },",
                      "    \"required\": [\"message\", \"office\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/8",
                  "host": ["{{host}}"],
                  "path": ["offices", "8"]
                }
              },
              "response": []
            },
            {
              "name": "Get office by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Office not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/9",
                  "host": ["{{host}}"],
                  "path": ["offices", "9"]
                }
              },
              "response": []
            },
            {
              "name": "Update office by code - bad request Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/8",
                  "host": ["{{host}}"],
                  "path": ["offices", "8"]
                }
              },
              "response": []
            },
            {
              "name": "Update office by code - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"officeCode\": 8,\n    \"city\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/8",
                  "host": ["{{host}}"],
                  "path": ["offices", "8"]
                }
              },
              "response": []
            },
            {
              "name": "Update office by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"office\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"officeCode\": { \"type\": 'string', \"maxLength\": 10 },",
                      "                \"city\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"phone\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"addressLine1\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"addressLine2\": { \"type\": ['string', 'null'], \"maxLength\": 50 },",
                      "                \"state\": { \"type\": ['string', 'null'], \"maxLength\": 50 },",
                      "                \"country\": { \"type\": 'string', \"maxLength\": 50 },",
                      "                \"postalCode\": { \"type\": 'string', \"maxLength\": 15 },",
                      "                \"territory\": { \"type\": 'string', \"maxLength\": 10 },",
                      "            },",
                      "            required: [",
                      "                \"officeCode\",",
                      "                \"city\",",
                      "                \"phone\",",
                      "                \"addressLine1\",",
                      "                \"country\",",
                      "                \"postalCode\",",
                      "                \"territory\"",
                      "            ]",
                      "        }",
                      "    },",
                      "    \"required\": [\"message\", \"office\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/8",
                  "host": ["{{host}}"],
                  "path": ["offices", "8"]
                }
              },
              "response": []
            },
            {
              "name": "Update office by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Office not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/1212",
                  "host": ["{{host}}"],
                  "path": ["offices", "1212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete office by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/1212",
                  "host": ["{{host}}"],
                  "path": ["offices", "1212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete office by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/8",
                  "host": ["{{host}}"],
                  "path": ["offices", "8"]
                }
              },
              "response": []
            },
            {
              "name": "Delete office by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Office not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/8",
                  "host": ["{{host}}"],
                  "path": ["offices", "8"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "employees",
          "item": [
            {
              "name": "Get all employees - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"total\": { \"type\": \"number\" },",
                      "        \"data\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"employeeNumber\": { \"type\": \"number\" },",
                      "                    \"lastName\": { \"type\": \"string\" },",
                      "                    \"firstName\": { \"type\": \"string\" },",
                      "                    \"extension\": { \"type\": \"string\" },",
                      "                    \"email\": { \"type\": \"string\" },",
                      "                    \"officeCode\": { \"type\": \"string\" },",
                      "                    \"reportsTo\": { \"type\": [\"number\", \"null\"] },",
                      "                    \"jobTitle\": { \"type\": \"string\" },",
                      "                    \"role\": { \"type\": \"number\", \"enum\": [1, 2, 3] },",
                      "                },",
                      "                \"required\": [",
                      "                    \"employeeNumber\",",
                      "                    \"firstName\",",
                      "                    \"extension\",",
                      "                    \"email\",",
                      "                    \"officeCode\",",
                      "                    \"reportsTo\",",
                      "                    \"jobTitle\",",
                      "                    \"role\"",
                      "                ]",
                      "            }",
                      "        },",
                      "    },",
                      "    \"required\": [",
                      "        \"total\",",
                      "        \"data\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/employees?role=2",
                  "host": ["{{host}}"],
                  "path": ["employees"],
                  "query": [
                    {
                      "key": "role",
                      "value": "2"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create employee - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Create employee - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Create employee - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"employee\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"employeeNumber\": { \"type\": \"number\" },",
                      "                \"lastName\": { \"type\": \"string\" },",
                      "                \"firstName\": { \"type\": \"string\" },",
                      "                \"extension\": { \"type\": \"string\" },",
                      "                \"email\": { \"type\": \"string\" },",
                      "                \"officeCode\": { \"type\": \"string\" },",
                      "                \"reportsTo\": { \"type\": [\"number\", \"null\"] },",
                      "                \"jobTitle\": { \"type\": \"string\", \"enum\": [\"Admin\", \"Manager\", \"Staff\"] },",
                      "                \"role\": { \"type\": \"number\", \"enum\": [1, 2, 3] },",
                      "            },",
                      "            \"required\": [",
                      "                \"employeeNumber\",",
                      "                \"firstName\",",
                      "                \"extension\",",
                      "                \"email\",",
                      "                \"officeCode\",",
                      "                \"reportsTo\",",
                      "                \"jobTitle\",",
                      "                \"role\"",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"employee\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": 3,\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Create employee - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Employee does exist\");",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": 3,\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Get employee by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            },
            {
              "name": "Get employee by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"employee\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"employeeNumber\": { \"type\": \"number\" },",
                      "                \"lastName\": { \"type\": \"string\" },",
                      "                \"firstName\": { \"type\": \"string\" },",
                      "                \"extension\": { \"type\": \"string\" },",
                      "                \"email\": { \"type\": \"string\" },",
                      "                \"officeCode\": { \"type\": \"string\" },",
                      "                \"reportsTo\": { \"type\": [\"number\", \"null\"] },",
                      "                \"jobTitle\": { \"type\": \"string\", \"enum\": [\"Admin\", \"Manager\", \"Staff\"] },",
                      "                \"role\": { \"type\": \"number\", \"enum\": [1, 2, 3] },",
                      "            },",
                      "            \"required\": [",
                      "                \"employeeNumber\",",
                      "                \"firstName\",",
                      "                \"extension\",",
                      "                \"email\",",
                      "                \"officeCode\",",
                      "                \"reportsTo\",",
                      "                \"jobTitle\",",
                      "                \"role\"",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"employee\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            },
            {
              "name": "Get employee by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Employee not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/2222",
                  "host": ["{{host}}"],
                  "path": ["employees", "2222"]
                }
              },
              "response": []
            },
            {
              "name": "Update employee by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            },
            {
              "name": "Update employee by number - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"as\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            },
            {
              "name": "Update employee by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"employee\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"employeeNumber\": { \"type\": \"number\" },",
                      "                \"lastName\": { \"type\": \"string\" },",
                      "                \"firstName\": { \"type\": \"string\" },",
                      "                \"extension\": { \"type\": \"string\" },",
                      "                \"email\": { \"type\": \"string\" },",
                      "                \"officeCode\": { \"type\": \"string\" },",
                      "                \"reportsTo\": { \"type\": [\"number\", \"null\"] },",
                      "                \"jobTitle\": { \"type\": \"string\", \"enum\": [\"Admin\", \"Manager\", \"Staff\"] },",
                      "                \"role\": { \"type\": \"number\", \"enum\": [1, 2, 3] },",
                      "            },",
                      "            \"required\": [",
                      "                \"employeeNumber\",",
                      "                \"firstName\",",
                      "                \"extension\",",
                      "                \"email\",",
                      "                \"officeCode\",",
                      "                \"reportsTo\",",
                      "                \"jobTitle\",",
                      "                \"role\"",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"employee\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            },
            {
              "name": "Update employee by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Employee not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/1211212",
                  "host": ["{{host}}"],
                  "path": ["employees", "1211212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete employee by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            },
            {
              "name": "Delete employee by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            },
            {
              "name": "Delete employee by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Employee not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/1212",
                  "host": ["{{host}}"],
                  "path": ["employees", "1212"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "customers",
          "item": [
            {
              "name": "Get all customers - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"total\": { \"type\": \"number\" },",
                      "        \"customers\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"customerNumber\": { \"type\": \"number\" },",
                      "                    \"customerName\": { \"type\": \"string\" },",
                      "                    \"contactLastName\": { \"type\": \"string\" },",
                      "                    \"contactFirstName\": { \"type\": \"string\" },",
                      "                    \"phone\": { \"type\": \"string\" },",
                      "                    \"addressLine1\": { \"type\": \"string\" },",
                      "                    \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"city\": { \"type\": \"string\" },",
                      "                    \"state\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"postalCode\": { \"type\": \"string\" },",
                      "                    \"country\": { \"type\": \"string\" },",
                      "                    \"salesRepEmployeeNumber\": { \"type\": [\"number\", \"null\"] },",
                      "                    \"creditLimit\": { \"type\": \"number\" },",
                      "                    \"role\": { \"type\": \"number\" },",
                      "                },",
                      "                \"required\": [",
                      "                    \"customerNumber\",",
                      "                    \"customerName\",",
                      "                    \"contactLastName\",",
                      "                    \"contactFirstName\",",
                      "                    \"phone\",",
                      "                    \"addressLine1\",",
                      "                    \"addressLine2\",",
                      "                    \"city\",",
                      "                    \"state\",",
                      "                    \"postalCode\",",
                      "                    \"country\",",
                      "                    \"salesRepEmployeeNumber\",",
                      "                    \"creditLimit\",",
                      "                    \"role\"",
                      "                ]",
                      "            }",
                      "        },",
                      "    },",
                      "    \"required\": [",
                      "        \"total\",",
                      "        \"customers\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"result\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"customerNumber\": { \"type\": \"number\" },",
                      "                \"customerName\": { \"type\": \"string\" },",
                      "                \"contactLastName\": { \"type\": \"string\" },",
                      "                \"contactFirstName\": { \"type\": \"string\" },",
                      "                \"phone\": { \"type\": \"string\" },",
                      "                \"addressLine1\": { \"type\": \"string\" },",
                      "                \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "                \"city\": { \"type\": \"string\" },",
                      "                \"state\": { \"type\": [\"string\", \"null\"] },",
                      "                \"postalCode\": { \"type\": \"string\" },",
                      "                \"country\": { \"type\": \"string\" },",
                      "                \"salesRepEmployeeNumber\": { \"type\": \"number\" },",
                      "                \"creditLimit\": { \"type\": \"number\" },",
                      "                \"role\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "                \"customerNumber\",",
                      "                \"customerName\",",
                      "                \"contactLastName\",",
                      "                \"contactFirstName\",",
                      "                \"phone\",",
                      "                \"addressLine1\",",
                      "                \"addressLine2\",",
                      "                \"city\",",
                      "                \"state\",",
                      "                \"postalCode\",",
                      "                \"country\",",
                      "                \"salesRepEmployeeNumber\",",
                      "                \"creditLimit\",",
                      "                \"role\"",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"result\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerNumber\": 497,\n    \"customerName\": \"Atelier graphique\",\n    \"contactLastName\": \"Schmitt\",\n    \"contactFirstName\": \"Carine \",\n    \"phone\": \"40.32.2555\",\n    \"addressLine1\": \"54, rue Royale\",\n    \"addressLine2\": null,\n    \"city\": \"Nantes\",\n    \"state\": null,\n    \"postalCode\": \"44000\",\n    \"country\": \"France\",\n    \"salesRepEmployeeNumber\": 1370,\n    \"creditLimit\": 21000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Duplicate data of customer number\");",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerNumber\": 497,\n    \"customerName\": \"Atelier graphique\",\n    \"contactLastName\": \"Schmitt\",\n    \"contactFirstName\": \"Carine \",\n    \"phone\": \"40.32.2555\",\n    \"addressLine1\": \"54, rue Royale\",\n    \"addressLine2\": null,\n    \"city\": \"Nantes\",\n    \"state\": null,\n    \"postalCode\": \"44000\",\n    \"country\": \"France\",\n    \"salesRepEmployeeNumber\": 1370,\n    \"creditLimit\": 21000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Get  customer by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Get customer by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "        \"customerName\": { \"type\": \"string\" },",
                      "        \"contactLastName\": { \"type\": \"string\" },",
                      "        \"contactFirstName\": { \"type\": \"string\" },",
                      "        \"phone\": { \"type\": \"string\" },",
                      "        \"addressLine1\": { \"type\": \"string\" },",
                      "        \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "        \"city\": { \"type\": \"string\" },",
                      "        \"state\": { \"type\": [\"string\", \"null\"] },",
                      "        \"postalCode\": { \"type\": \"string\" },",
                      "        \"country\": { \"type\": \"string\" },",
                      "        \"salesRepEmployeeNumber\": { \"type\": \"number\" },",
                      "        \"creditLimit\": { \"type\": \"number\" },",
                      "        \"role\": { \"type\": \"number\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"customerNumber\",",
                      "        \"customerName\",",
                      "        \"contactLastName\",",
                      "        \"contactFirstName\",",
                      "        \"phone\",",
                      "        \"addressLine1\",",
                      "        \"addressLine2\",",
                      "        \"city\",",
                      "        \"state\",",
                      "        \"postalCode\",",
                      "        \"country\",",
                      "        \"salesRepEmployeeNumber\",",
                      "        \"creditLimit\",",
                      "        \"role\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Get customer by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require(\"ajv\");",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Customer not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/2222",
                  "host": ["{{host}}"],
                  "path": ["customers", "2222"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"as\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "        \"customerName\": { \"type\": \"string\" },",
                      "        \"contactLastName\": { \"type\": \"string\" },",
                      "        \"contactFirstName\": { \"type\": \"string\" },",
                      "        \"phone\": { \"type\": \"string\" },",
                      "        \"addressLine1\": { \"type\": \"string\" },",
                      "        \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "        \"city\": { \"type\": \"string\" },",
                      "        \"state\": { \"type\": [\"string\", \"null\"] },",
                      "        \"postalCode\": { \"type\": \"string\" },",
                      "        \"country\": { \"type\": \"string\" },",
                      "        \"salesRepEmployeeNumber\": { \"type\": \"number\" },",
                      "        \"creditLimit\": { \"type\": \"number\" },",
                      "        \"role\": { \"type\": \"number\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"customerNumber\",",
                      "        \"customerName\",",
                      "        \"contactLastName\",",
                      "        \"contactFirstName\",",
                      "        \"phone\",",
                      "        \"addressLine1\",",
                      "        \"addressLine2\",",
                      "        \"city\",",
                      "        \"state\",",
                      "        \"postalCode\",",
                      "        \"country\",",
                      "        \"salesRepEmployeeNumber\",",
                      "        \"creditLimit\",",
                      "        \"role\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerName\": \"Atelier graphique UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Not Found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerName\": \"Atelier graphique UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/1211212",
                  "host": ["{{host}}"],
                  "path": ["customers", "1211212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete customer by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/1212",
                  "host": ["{{host}}"],
                  "path": ["customers", "1212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete customer by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Delete customer by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Not Found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "productlines",
          "item": [
            {
              "name": "Get all productlines - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"total\": { \"type\": \"number\" },",
                      "        \"productLines\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"productLine\": { \"type\": \"string\" },",
                      "                    \"textDescription\": { \"type\": \"string\" },",
                      "                    \"htmlDescription\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"image\": { \"type\": [\"string\", \"null\"] },",
                      "                },",
                      "                \"required\": [",
                      "                    \"productLine\",",
                      "                    \"textDescription\",",
                      "                    \"htmlDescription\",",
                      "                    \"image\",",
                      "                ]",
                      "            }",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"productLines\",",
                      "        \"total\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": 1234,\n    \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\n    \"htmlDescription\": null,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"productLine\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"textDescription\": { \"type\": \"string\" },",
                      "                \"htmlDescription\": { \"type\": [\"string\", \"null\"] },",
                      "                \"image\": { \"type\": [\"string\", \"null\"] },",
                      "            },",
                      "            \"required\": [",
                      "                \"productLine\",",
                      "                \"textDescription\",",
                      "                \"htmlDescription\",",
                      "                \"image\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"productLine\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": \"New Product Line\",\n    \"textDescription\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Eveniet beatae saepe obcaecati itaque soluta, libero minima a. Quibusdam nostrum quasi accusamus soluta eum aspernatur omnis repellat dolores. Architecto, molestias eveniet.\",\n    \"htmlDescription\": null,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": \"New Product Line\",\n    \"textDescription\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Eveniet beatae saepe obcaecati itaque soluta, libero minima a. Quibusdam nostrum quasi accusamus soluta eum aspernatur omnis repellat dolores. Architecto, molestias eveniet.\",\n    \"htmlDescription\": null,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": \"New Product Line\",\n    \"textDescription\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Eveniet beatae saepe obcaecati itaque soluta, libero minima a. Quibusdam nostrum quasi accusamus soluta eum aspernatur omnis repellat dolores. Architecto, molestias eveniet.\",\n    \"htmlDescription\": 1,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"productLine\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"textDescription\": { \"type\": \"string\" },",
                      "                \"htmlDescription\": { \"type\": [\"string\", \"null\"] },",
                      "                \"image\": { \"type\": [\"string\", \"null\"] },",
                      "            },",
                      "            \"required\": [",
                      "                \"productLine\",",
                      "                \"textDescription\",",
                      "                \"htmlDescription\",",
                      "                \"image\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"productLine\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"htmlDescription\": \"UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Update productLine failed\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"htmlDescription\": \"UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line1",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line1"]
                }
              },
              "response": []
            },
            {
              "name": "Delete productline by name - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Delete productline by name - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Delete productline by name - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Could not delete product line\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "products",
          "item": [
            {
              "name": "Get all products - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"products\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"productCode\": { \"type\": \"string\" },",
                      "                    \"productName\": { \"type\": \"string\" },",
                      "                    \"productLine\": { \"type\": \"string\" },",
                      "                    \"productScale\": { \"type\": \"string\" },",
                      "                    \"productVendor\": { \"type\": \"string\" },",
                      "                    \"productDescription\": { \"type\": \"string\" },",
                      "                    \"quantityInStock\": { \"type\": \"number\" },",
                      "                    \"buyPrice\": { \"type\": \"number\" },",
                      "                    \"MSRP\": { \"type\": \"number\" },",
                      "                },",
                      "                \"required\": [",
                      "                    \"productCode\",",
                      "                    \"productName\",",
                      "                    \"productLine\",",
                      "                    \"productScale\",",
                      "                    \"productVendor\",",
                      "                    \"productDescription\",",
                      "                    \"quantityInStock\",",
                      "                    \"buyPrice\",",
                      "                    \"MSRP\",",
                      "                ]",
                      "            }",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"products\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"product\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productCode\": { \"type\": \"string\" },",
                      "                \"productName\": { \"type\": \"string\" },",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"productScale\": { \"type\": \"string\" },",
                      "                \"productVendor\": { \"type\": \"string\" },",
                      "                \"productDescription\": { \"type\": \"string\" },",
                      "                \"quantityInStock\": { \"type\": \"number\" },",
                      "                \"buyPrice\": { \"type\": \"number\" },",
                      "                \"MSRP\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "               \"productCode\",",
                      "                \"productName\",",
                      "                \"productLine\",",
                      "                \"productScale\",",
                      "                \"productVendor\",",
                      "                \"productDescription\",",
                      "                \"quantityInStock\",",
                      "                \"buyPrice\",",
                      "                \"MSRP\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"product\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productCode\": \"S10_5004\",\n  \"productName\": \"productName\",\n  \"productLine\": \"Classic Cars\",\n  \"productScale\": \"1:10\",\n  \"productVendor\": \"productVendor\",\n  \"productDescription\": \"productDescription\",\n  \"quantityInStock\": 100,\n  \"buyPrice\": 1.00,\n  \"MSRP\": 2.00\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Duplicate info product code.\");",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productCode\": \"S10_5004\",\n  \"productName\": \"productName\",\n  \"productLine\": \"Classic Cars\",\n  \"productScale\": \"1:10\",\n  \"productVendor\": \"productVendor\",\n  \"productDescription\": \"productDescription\",\n  \"quantityInStock\": 100,\n  \"buyPrice\": 1.00,\n  \"MSRP\": 2.00\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Get  product by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Get product by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"product\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productCode\": { \"type\": \"string\" },",
                      "                \"productName\": { \"type\": \"string\" },",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"productScale\": { \"type\": \"string\" },",
                      "                \"productVendor\": { \"type\": \"string\" },",
                      "                \"productDescription\": { \"type\": \"string\" },",
                      "                \"quantityInStock\": { \"type\": \"number\" },",
                      "                \"buyPrice\": { \"type\": \"number\" },",
                      "                \"MSRP\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "               \"productCode\",",
                      "                \"productName\",",
                      "                \"productLine\",",
                      "                \"productScale\",",
                      "                \"productVendor\",",
                      "                \"productDescription\",",
                      "                \"quantityInStock\",",
                      "                \"buyPrice\",",
                      "                \"MSRP\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"product\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Get product by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Can not find product with code S10_5004asas\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004asas",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004asas"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"as\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"product\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productCode\": { \"type\": \"string\" },",
                      "                \"productName\": { \"type\": \"string\" },",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"productScale\": { \"type\": \"string\" },",
                      "                \"productVendor\": { \"type\": \"string\" },",
                      "                \"productDescription\": { \"type\": \"string\" },",
                      "                \"quantityInStock\": { \"type\": \"number\" },",
                      "                \"buyPrice\": { \"type\": \"number\" },",
                      "                \"MSRP\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "               \"productCode\",",
                      "                \"productName\",",
                      "                \"productLine\",",
                      "                \"productScale\",",
                      "                \"productVendor\",",
                      "                \"productDescription\",",
                      "                \"quantityInStock\",",
                      "                \"buyPrice\",",
                      "                \"MSRP\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"product\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productName\": \"Name Update\",\n  \"MSRP\": 1000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Can not find product with code S10_5004asas\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productName\": \"Name Update\",\n    \"MSRP\": 1000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004asas",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004asas"]
                }
              },
              "response": []
            },
            {
              "name": "Delete product by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Delete product by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Delete product by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Can not find product with code S10_5004\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "orders",
          "item": [
            {
              "name": "Get orders of customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"total\": { \"type\": \"number\" },",
                      "        \"orders\": {",
                      "            \"type\": \"array\",",
                      "        },",
                      "    },",
                      "    \"required\": [",
                      "        \"total\",",
                      "        \"orders\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/orders?customerNumber=148",
                  "host": ["{{host}}"],
                  "path": ["orders"],
                  "query": [
                    {
                      "key": "customerNumber",
                      "value": "148"
                    },
                    {
                      "key": "status",
                      "value": "Shipped",
                      "disabled": true
                    },
                    {
                      "key": "requiredDate",
                      "value": "desc",
                      "disabled": true
                    },
                    {
                      "key": "shippedDate",
                      "value": "desc",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get orders of customer - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"message\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Customer not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/orders?customerNumber=1412112",
                  "host": ["{{host}}"],
                  "path": ["orders"],
                  "query": [
                    {
                      "key": "customerNumber",
                      "value": "1412112"
                    },
                    {
                      "key": "status",
                      "value": "Shipped",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create order - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Create order - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and no update customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"order\": {\"type\": \"object\"}",
                      "    },",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10428,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"customerNumber\": 103,\n    \"update\": null,\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and update customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"order\": { \"type\": \"object\" }",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"order\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10429,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"customerNumber\": 103,\n    \"update\": {\n        \"customerName\": \"Iam jus update\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"0123456789\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and create customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10430,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ],\n    \"customerNumber\": 497,\n    \"create\": {\n        \"customerNumber\": 497,\n        \"customerName\": \"Atelier graphique\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"40.32.2555\",\n        \"addressLine1\": \"54, rue Royale\",\n        \"addressLine2\": null,\n        \"city\": \"Nantes\",\n        \"state\": null,\n        \"postalCode\": \"44000\",\n        \"country\": \"France\",\n        \"salesRepEmployeeNumber\": 1370,\n        \"creditLimit\": 21000\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order & create C - create customer failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"message\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Duplicate data of customer number\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10431,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ],\n    \"customerNumber\": 497,\n    \"create\": {\n        \"customerNumber\": 497,\n        \"customerName\": \"Atelier graphique\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"40.32.2555\",\n        \"addressLine1\": \"54, rue Royale\",\n        \"addressLine2\": null,\n        \"city\": \"Nantes\",\n        \"state\": null,\n        \"postalCode\": \"44000\",\n        \"country\": \"France\",\n        \"salesRepEmployeeNumber\": 1370,\n        \"creditLimit\": 21000\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and create customer - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(!valid).to.be.true;",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10429,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ],\n    \"customerNumber\": 497,\n    \"create\": {\n        \"customerNumber\": 497,\n        \"customerName\": \"Atelier graphique\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"40.32.2555\",\n        \"addressLine1\": \"54, rue Royale\",\n        \"addressLine2\": null,\n        \"city\": \"Nantes\",\n        \"state\": null,\n        \"postalCode\": \"44000\",\n        \"country\": \"France\",\n        \"salesRepEmployeeNumber\": 1370,\n        \"creditLimit\": 21000\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Get  order by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Get order by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"orderNumber\": { \"type\": \"number\" },",
                      "        \"orderDate\": { \"type\": \"string\" },",
                      "        \"requiredDate\": { \"type\": \"string\" },",
                      "        \"shippedDate\": { \"type\": [\"string\", \"null\"] },",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"comments\": { \"type\": \"string\" },",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "        \"orderdetails\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"orderNumber\": { \"type\": \"number\" },",
                      "                    \"productCode\": { \"type\": \"string\" },",
                      "                    \"quantityOrdered\": { \"type\": \"number\" },",
                      "                    \"priceEach\": { \"type\": \"number\" },",
                      "                    \"orderLineNumber\": { \"type\": \"number\" },",
                      "                }",
                      "            }",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"orderNumber\",",
                      "        \"orderDate\",",
                      "        \"requiredDate\",",
                      "        \"shippedDate\",",
                      "        \"status\",",
                      "        \"comments\",",
                      "        \"customerNumber\",",
                      "        \"orderdetails\",",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(!valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10428",
                  "host": ["{{host}}"],
                  "path": ["orders", "10428"]
                }
              },
              "response": []
            },
            {
              "name": "Get order by number- not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(!valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Could not find order with order number 10429222\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429222",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429222"]
                }
              },
              "response": []
            },
            {
              "name": "Update order by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Update order by number - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"a\": \"On Hold\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Update order by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"orderNumber\": { \"type\": \"number\" },",
                      "        \"orderDate\": { \"type\": \"string\" },",
                      "        \"requiredDate\": { \"type\": \"string\" },",
                      "        \"shippedDate\": { \"type\": [\"string\", \"null\"] },",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"comments\": { \"type\": \"string\" },",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"orderNumber\",",
                      "        \"orderDate\",",
                      "        \"requiredDate\",",
                      "        \"shippedDate\",",
                      "        \"status\",",
                      "        \"comments\",",
                      "        \"customerNumber\",",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(!valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"Shipped\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Update order by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Could not find order with order number 10429222\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"On Hold\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429222",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429222"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number 10428 - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10428",
                  "host": ["{{host}}"],
                  "path": ["orders", "10428"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number 10429 - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": ["", "", "", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number 10430 - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10430",
                  "host": ["{{host}}"],
                  "path": ["orders", "10430"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"No order has been deleted\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            }
          ]
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "Manager - delete user test119",
      "item": [
        {
          "name": "register & login",
          "item": [
            {
              "name": "URL not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/abc",
                  "host": ["{{host}}"],
                  "path": ["abc"]
                }
              },
              "response": []
            },
            {
              "name": "Login - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"manager\",\n    \"password\": \"abc@321\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Login - wrong login info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schemaLoginFailed = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schemaLoginFailed);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Failed status schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"manager\",\n    \"password\": \"abc@3211\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Login - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"token\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('token has 3 parts', function (){",
                      "    const t = jsonData.token.split('.');",
                      "",
                      "    pm.expect(t.length).to.eql(3);",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"tokenManager\", jsonData.token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"manager1056\",\n    \"password\": \"Pass@1234\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Register - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 114,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": \"asb\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - data ref not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test1awda\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 1191111\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test119\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 119\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 119\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "key": "token",
                "value": "{{tokenManager}}",
                "type": "string"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "offices",
          "item": [
            {
              "name": "Get all - forbiden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');\r",
                      "const ajv = new Ajv();\r",
                      "\r",
                      "const schema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"status\": { \"type\": \"string\" },\r",
                      "        \"message\": { \"type\": \"string\" },\r",
                      "    },\r",
                      "    \"required\": [\"status\", \"message\"]\r",
                      "};\r",
                      "\r",
                      "const validate = ajv.compile(schema);\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 403\", function () {\r",
                      "    pm.response.to.have.status(403);\r",
                      "});\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    const valid = validate(jsonData)\r",
                      "    if (!valid) console.log(validate.errors)\r",
                      "    pm.expect(valid).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test('Should correct message', function (){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Get office by code - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');\r",
                      "const ajv = new Ajv();\r",
                      "\r",
                      "const schema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"status\": { \"type\": \"string\" },\r",
                      "        \"message\": { \"type\": \"string\" },\r",
                      "    },\r",
                      "    \"required\": [\"status\", \"message\"]\r",
                      "};\r",
                      "\r",
                      "const validate = ajv.compile(schema);\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 403\", function () {\r",
                      "    pm.response.to.have.status(403);\r",
                      "});\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    const valid = validate(jsonData)\r",
                      "    if (!valid) console.log(validate.errors)\r",
                      "    pm.expect(valid).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test('Should correct message', function (){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices/1",
                  "host": ["{{host}}"],
                  "path": ["offices", "1"]
                }
              },
              "response": []
            },
            {
              "name": "Create - forbiden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');\r",
                      "const ajv = new Ajv();\r",
                      "\r",
                      "const schema = {\r",
                      "    \"type\": \"object\",\r",
                      "    \"properties\": {\r",
                      "        \"status\": { \"type\": \"string\" },\r",
                      "        \"message\": { \"type\": \"string\" },\r",
                      "    },\r",
                      "    \"required\": [\"status\", \"message\"]\r",
                      "};\r",
                      "\r",
                      "const validate = ajv.compile(schema);\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 403\", function () {\r",
                      "    pm.response.to.have.status(403);\r",
                      "});\r",
                      "\r",
                      "pm.test('Schema is valid', function () {\r",
                      "    const valid = validate(jsonData)\r",
                      "    if (!valid) console.log(validate.errors)\r",
                      "    pm.expect(valid).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test('Should correct message', function (){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Update office by code - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices/1",
                  "host": ["{{host}}"],
                  "path": ["offices", "1"]
                }
              },
              "response": []
            },
            {
              "name": "Delete office by code - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices/1",
                  "host": ["{{host}}"],
                  "path": ["offices", "1"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "employees",
          "item": [
            {
              "name": "Get all - Forbiden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Get employee by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            },
            {
              "name": "Get employee by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Employee not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/2222",
                  "host": ["{{host}}"],
                  "path": ["employees", "2222"]
                }
              },
              "response": []
            },
            {
              "name": "Get employee by number - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"employee\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"employeeNumber\": { \"type\": \"number\" },",
                      "                \"lastName\": { \"type\": \"string\" },",
                      "                \"firstName\": { \"type\": \"string\" },",
                      "                \"extension\": { \"type\": \"string\" },",
                      "                \"email\": { \"type\": \"string\" },",
                      "                \"officeCode\": { \"type\": \"string\" },",
                      "                \"reportsTo\": { \"type\": [\"number\", \"null\"] },",
                      "                \"jobTitle\": { \"type\": \"string\", \"enum\": [\"Admin\", \"Manager\", \"Staff\"] },",
                      "                \"role\": { \"type\": \"number\", \"enum\": [1, 2, 3] },",
                      "            },",
                      "            \"required\": [",
                      "                \"employeeNumber\",",
                      "                \"firstName\",",
                      "                \"extension\",",
                      "                \"email\",",
                      "                \"officeCode\",",
                      "                \"reportsTo\",",
                      "                \"jobTitle\",",
                      "                \"role\"",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"employee\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.false ;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/1611",
                  "host": ["{{host}}"],
                  "path": ["employees", "1611"]
                }
              },
              "response": []
            },
            {
              "name": "Get employee by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"employee\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"employeeNumber\": { \"type\": \"number\" },",
                      "                \"lastName\": { \"type\": \"string\" },",
                      "                \"firstName\": { \"type\": \"string\" },",
                      "                \"extension\": { \"type\": \"string\" },",
                      "                \"email\": { \"type\": \"string\" },",
                      "                \"officeCode\": { \"type\": \"string\" },",
                      "                \"reportsTo\": { \"type\": [\"number\", \"null\"] },",
                      "                \"jobTitle\": { \"type\": \"string\", \"enum\": [\"Admin\", \"Manager\", \"Staff\"] },",
                      "                \"role\": { \"type\": \"number\", \"enum\": [1, 2, 3] },",
                      "            },",
                      "            \"required\": [",
                      "                \"employeeNumber\",",
                      "                \"firstName\",",
                      "                \"extension\",",
                      "                \"email\",",
                      "                \"officeCode\",",
                      "                \"reportsTo\",",
                      "                \"jobTitle\",",
                      "                \"role\"",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"employee\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.false ;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/1611",
                  "host": ["{{host}}"],
                  "path": ["employees", "1611"]
                }
              },
              "response": []
            },
            {
              "name": "Create employee - Forbiden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1165,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Update employee by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            },
            {
              "name": "Update employee by number - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"as\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/1165",
                  "host": ["{{host}}"],
                  "path": ["employees", "1165"]
                }
              },
              "response": []
            },
            {
              "name": "Update employee by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"employee\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"employeeNumber\": { \"type\": \"number\" },",
                      "                \"lastName\": { \"type\": \"string\" },",
                      "                \"firstName\": { \"type\": \"string\" },",
                      "                \"extension\": { \"type\": \"string\" },",
                      "                \"email\": { \"type\": \"string\" },",
                      "                \"officeCode\": { \"type\": \"string\" },",
                      "                \"reportsTo\": { \"type\": [\"number\", \"null\"] },",
                      "                \"jobTitle\": { \"type\": \"string\", \"enum\": [\"Admin\", \"Manager\", \"Staff\"] },",
                      "                \"role\": { \"type\": \"number\", \"enum\": [1, 2, 3] },",
                      "            },",
                      "            \"required\": [",
                      "                \"employeeNumber\",",
                      "                \"firstName\",",
                      "                \"extension\",",
                      "                \"email\",",
                      "                \"officeCode\",",
                      "                \"reportsTo\",",
                      "                \"jobTitle\",",
                      "                \"role\"",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"employee\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/1165",
                  "host": ["{{host}}"],
                  "path": ["employees", "1165"]
                }
              },
              "response": []
            },
            {
              "name": "Update employee by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Employee not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/1211212",
                  "host": ["{{host}}"],
                  "path": ["employees", "1211212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete - Forbiden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "customers",
          "item": [
            {
              "name": "Get all customers - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"total\": { \"type\": \"number\" },",
                      "        \"customers\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"customerNumber\": { \"type\": \"number\" },",
                      "                    \"customerName\": { \"type\": \"string\" },",
                      "                    \"contactLastName\": { \"type\": \"string\" },",
                      "                    \"contactFirstName\": { \"type\": \"string\" },",
                      "                    \"phone\": { \"type\": \"string\" },",
                      "                    \"addressLine1\": { \"type\": \"string\" },",
                      "                    \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"city\": { \"type\": \"string\" },",
                      "                    \"state\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"postalCode\": { \"type\": \"string\" },",
                      "                    \"country\": { \"type\": \"string\" },",
                      "                    \"salesRepEmployeeNumber\": { \"type\": [\"number\", \"null\"] },",
                      "                    \"creditLimit\": { \"type\": \"number\" },",
                      "                    \"role\": { \"type\": \"number\" },",
                      "                },",
                      "                \"required\": [",
                      "                    \"customerNumber\",",
                      "                    \"customerName\",",
                      "                    \"contactLastName\",",
                      "                    \"contactFirstName\",",
                      "                    \"phone\",",
                      "                    \"addressLine1\",",
                      "                    \"addressLine2\",",
                      "                    \"city\",",
                      "                    \"state\",",
                      "                    \"postalCode\",",
                      "                    \"country\",",
                      "                    \"salesRepEmployeeNumber\",",
                      "                    \"creditLimit\",",
                      "                    \"role\"",
                      "                ]",
                      "            }",
                      "        },",
                      "    },",
                      "    \"required\": [",
                      "        \"total\",",
                      "        \"customers\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"result\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"customerNumber\": { \"type\": \"number\" },",
                      "                \"customerName\": { \"type\": \"string\" },",
                      "                \"contactLastName\": { \"type\": \"string\" },",
                      "                \"contactFirstName\": { \"type\": \"string\" },",
                      "                \"phone\": { \"type\": \"string\" },",
                      "                \"addressLine1\": { \"type\": \"string\" },",
                      "                \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "                \"city\": { \"type\": \"string\" },",
                      "                \"state\": { \"type\": [\"string\", \"null\"] },",
                      "                \"postalCode\": { \"type\": \"string\" },",
                      "                \"country\": { \"type\": \"string\" },",
                      "                \"salesRepEmployeeNumber\": { \"type\": \"number\" },",
                      "                \"creditLimit\": { \"type\": \"number\" },",
                      "                \"role\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "                \"customerNumber\",",
                      "                \"customerName\",",
                      "                \"contactLastName\",",
                      "                \"contactFirstName\",",
                      "                \"phone\",",
                      "                \"addressLine1\",",
                      "                \"addressLine2\",",
                      "                \"city\",",
                      "                \"state\",",
                      "                \"postalCode\",",
                      "                \"country\",",
                      "                \"salesRepEmployeeNumber\",",
                      "                \"creditLimit\",",
                      "                \"role\"",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"result\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerNumber\": 4999,\n    \"customerName\": \"Atelier graphique\",\n    \"contactLastName\": \"Schmitt\",\n    \"contactFirstName\": \"Carine \",\n    \"phone\": \"40.32.2555\",\n    \"addressLine1\": \"54, rue Royale\",\n    \"addressLine2\": null,\n    \"city\": \"Nantes\",\n    \"state\": null,\n    \"postalCode\": \"44000\",\n    \"country\": \"France\",\n    \"salesRepEmployeeNumber\": 1370,\n    \"creditLimit\": 21000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Duplicate data of customer number\");",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerNumber\": 497,\n    \"customerName\": \"Atelier graphique\",\n    \"contactLastName\": \"Schmitt\",\n    \"contactFirstName\": \"Carine \",\n    \"phone\": \"40.32.2555\",\n    \"addressLine1\": \"54, rue Royale\",\n    \"addressLine2\": null,\n    \"city\": \"Nantes\",\n    \"state\": null,\n    \"postalCode\": \"44000\",\n    \"country\": \"France\",\n    \"salesRepEmployeeNumber\": 1370,\n    \"creditLimit\": 21000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Get  customer by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Get customer by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "        \"customerName\": { \"type\": \"string\" },",
                      "        \"contactLastName\": { \"type\": \"string\" },",
                      "        \"contactFirstName\": { \"type\": \"string\" },",
                      "        \"phone\": { \"type\": \"string\" },",
                      "        \"addressLine1\": { \"type\": \"string\" },",
                      "        \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "        \"city\": { \"type\": \"string\" },",
                      "        \"state\": { \"type\": [\"string\", \"null\"] },",
                      "        \"postalCode\": { \"type\": \"string\" },",
                      "        \"country\": { \"type\": \"string\" },",
                      "        \"salesRepEmployeeNumber\": { \"type\": \"number\" },",
                      "        \"creditLimit\": { \"type\": \"number\" },",
                      "        \"role\": { \"type\": \"number\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"customerNumber\",",
                      "        \"customerName\",",
                      "        \"contactLastName\",",
                      "        \"contactFirstName\",",
                      "        \"phone\",",
                      "        \"addressLine1\",",
                      "        \"addressLine2\",",
                      "        \"city\",",
                      "        \"state\",",
                      "        \"postalCode\",",
                      "        \"country\",",
                      "        \"salesRepEmployeeNumber\",",
                      "        \"creditLimit\",",
                      "        \"role\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Get customer by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require(\"ajv\");",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Customer not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/2222",
                  "host": ["{{host}}"],
                  "path": ["customers", "2222"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"as\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "        \"customerName\": { \"type\": \"string\" },",
                      "        \"contactLastName\": { \"type\": \"string\" },",
                      "        \"contactFirstName\": { \"type\": \"string\" },",
                      "        \"phone\": { \"type\": \"string\" },",
                      "        \"addressLine1\": { \"type\": \"string\" },",
                      "        \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "        \"city\": { \"type\": \"string\" },",
                      "        \"state\": { \"type\": [\"string\", \"null\"] },",
                      "        \"postalCode\": { \"type\": \"string\" },",
                      "        \"country\": { \"type\": \"string\" },",
                      "        \"salesRepEmployeeNumber\": { \"type\": \"number\" },",
                      "        \"creditLimit\": { \"type\": \"number\" },",
                      "        \"role\": { \"type\": \"number\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"customerNumber\",",
                      "        \"customerName\",",
                      "        \"contactLastName\",",
                      "        \"contactFirstName\",",
                      "        \"phone\",",
                      "        \"addressLine1\",",
                      "        \"addressLine2\",",
                      "        \"city\",",
                      "        \"state\",",
                      "        \"postalCode\",",
                      "        \"country\",",
                      "        \"salesRepEmployeeNumber\",",
                      "        \"creditLimit\",",
                      "        \"role\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerName\": \"Atelier graphique UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Not Found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerName\": \"Atelier graphique UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/1211212",
                  "host": ["{{host}}"],
                  "path": ["customers", "1211212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete customer by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/1212",
                  "host": ["{{host}}"],
                  "path": ["customers", "1212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete customer by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Delete customer by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Not Found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "products",
          "item": [
            {
              "name": "Get all products - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"products\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"productCode\": { \"type\": \"string\" },",
                      "                    \"productName\": { \"type\": \"string\" },",
                      "                    \"productLine\": { \"type\": \"string\" },",
                      "                    \"productScale\": { \"type\": \"string\" },",
                      "                    \"productVendor\": { \"type\": \"string\" },",
                      "                    \"productDescription\": { \"type\": \"string\" },",
                      "                    \"quantityInStock\": { \"type\": \"number\" },",
                      "                    \"buyPrice\": { \"type\": \"number\" },",
                      "                    \"MSRP\": { \"type\": \"number\" },",
                      "                },",
                      "                \"required\": [",
                      "                    \"productCode\",",
                      "                    \"productName\",",
                      "                    \"productLine\",",
                      "                    \"productScale\",",
                      "                    \"productVendor\",",
                      "                    \"productDescription\",",
                      "                    \"quantityInStock\",",
                      "                    \"buyPrice\",",
                      "                    \"MSRP\",",
                      "                ]",
                      "            }",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"products\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"product\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productCode\": { \"type\": \"string\" },",
                      "                \"productName\": { \"type\": \"string\" },",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"productScale\": { \"type\": \"string\" },",
                      "                \"productVendor\": { \"type\": \"string\" },",
                      "                \"productDescription\": { \"type\": \"string\" },",
                      "                \"quantityInStock\": { \"type\": \"number\" },",
                      "                \"buyPrice\": { \"type\": \"number\" },",
                      "                \"MSRP\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "               \"productCode\",",
                      "                \"productName\",",
                      "                \"productLine\",",
                      "                \"productScale\",",
                      "                \"productVendor\",",
                      "                \"productDescription\",",
                      "                \"quantityInStock\",",
                      "                \"buyPrice\",",
                      "                \"MSRP\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"product\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productCode\": \"S10_5004\",\n  \"productName\": \"productName\",\n  \"productLine\": \"Classic Cars\",\n  \"productScale\": \"1:10\",\n  \"productVendor\": \"productVendor\",\n  \"productDescription\": \"productDescription\",\n  \"quantityInStock\": 100,\n  \"buyPrice\": 1.00,\n  \"MSRP\": 2.00\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Duplicate info product code.\");",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productCode\": \"S10_5004\",\n  \"productName\": \"productName\",\n  \"productLine\": \"Classic Cars\",\n  \"productScale\": \"1:10\",\n  \"productVendor\": \"productVendor\",\n  \"productDescription\": \"productDescription\",\n  \"quantityInStock\": 100,\n  \"buyPrice\": 1.00,\n  \"MSRP\": 2.00\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Get  product by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Get product by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"product\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productCode\": { \"type\": \"string\" },",
                      "                \"productName\": { \"type\": \"string\" },",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"productScale\": { \"type\": \"string\" },",
                      "                \"productVendor\": { \"type\": \"string\" },",
                      "                \"productDescription\": { \"type\": \"string\" },",
                      "                \"quantityInStock\": { \"type\": \"number\" },",
                      "                \"buyPrice\": { \"type\": \"number\" },",
                      "                \"MSRP\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "               \"productCode\",",
                      "                \"productName\",",
                      "                \"productLine\",",
                      "                \"productScale\",",
                      "                \"productVendor\",",
                      "                \"productDescription\",",
                      "                \"quantityInStock\",",
                      "                \"buyPrice\",",
                      "                \"MSRP\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"product\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Get product by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Can not find product with code S10_5004asas\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004asas",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004asas"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"as\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"product\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productCode\": { \"type\": \"string\" },",
                      "                \"productName\": { \"type\": \"string\" },",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"productScale\": { \"type\": \"string\" },",
                      "                \"productVendor\": { \"type\": \"string\" },",
                      "                \"productDescription\": { \"type\": \"string\" },",
                      "                \"quantityInStock\": { \"type\": \"number\" },",
                      "                \"buyPrice\": { \"type\": \"number\" },",
                      "                \"MSRP\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "               \"productCode\",",
                      "                \"productName\",",
                      "                \"productLine\",",
                      "                \"productScale\",",
                      "                \"productVendor\",",
                      "                \"productDescription\",",
                      "                \"quantityInStock\",",
                      "                \"buyPrice\",",
                      "                \"MSRP\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"product\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productName\": \"Name Update\",\n  \"MSRP\": 1000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Can not find product with code S10_5004asas\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productName\": \"Name Update\",\n    \"MSRP\": 1000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004asas",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004asas"]
                }
              },
              "response": []
            },
            {
              "name": "Delete product by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Delete product by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Delete product by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Can not find product with code S10_5004\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "productlines",
          "item": [
            {
              "name": "Get all productlines - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"total\": { \"type\": \"number\" },",
                      "        \"productLines\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"productLine\": { \"type\": \"string\" },",
                      "                    \"textDescription\": { \"type\": \"string\" },",
                      "                    \"htmlDescription\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"image\": { \"type\": [\"string\", \"null\"] },",
                      "                },",
                      "                \"required\": [",
                      "                    \"productLine\",",
                      "                    \"textDescription\",",
                      "                    \"htmlDescription\",",
                      "                    \"image\",",
                      "                ]",
                      "            }",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"productLines\",",
                      "        \"total\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": 1234,\n    \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\n    \"htmlDescription\": null,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"productLine\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"textDescription\": { \"type\": \"string\" },",
                      "                \"htmlDescription\": { \"type\": [\"string\", \"null\"] },",
                      "                \"image\": { \"type\": [\"string\", \"null\"] },",
                      "            },",
                      "            \"required\": [",
                      "                \"productLine\",",
                      "                \"textDescription\",",
                      "                \"htmlDescription\",",
                      "                \"image\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"productLine\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": \"New Product Line\",\n    \"textDescription\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Eveniet beatae saepe obcaecati itaque soluta, libero minima a. Quibusdam nostrum quasi accusamus soluta eum aspernatur omnis repellat dolores. Architecto, molestias eveniet.\",\n    \"htmlDescription\": null,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": \"New Product Line\",\n    \"textDescription\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Eveniet beatae saepe obcaecati itaque soluta, libero minima a. Quibusdam nostrum quasi accusamus soluta eum aspernatur omnis repellat dolores. Architecto, molestias eveniet.\",\n    \"htmlDescription\": null,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": \"New Product Line\",\n    \"textDescription\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Eveniet beatae saepe obcaecati itaque soluta, libero minima a. Quibusdam nostrum quasi accusamus soluta eum aspernatur omnis repellat dolores. Architecto, molestias eveniet.\",\n    \"htmlDescription\": 1,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"productLine\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"textDescription\": { \"type\": \"string\" },",
                      "                \"htmlDescription\": { \"type\": [\"string\", \"null\"] },",
                      "                \"image\": { \"type\": [\"string\", \"null\"] },",
                      "            },",
                      "            \"required\": [",
                      "                \"productLine\",",
                      "                \"textDescription\",",
                      "                \"htmlDescription\",",
                      "                \"image\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"productLine\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"htmlDescription\": \"UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Update productLine failed\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"htmlDescription\": \"UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line1",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line1"]
                }
              },
              "response": []
            },
            {
              "name": "Delete productline by name - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Delete productline by name - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Delete productline by name - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Could not delete product line\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "key": "token",
                "value": "{{tokenManager}}",
                "type": "string"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "orders",
          "item": [
            {
              "name": "Get orders of customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"total\": { \"type\": \"number\" },",
                      "        \"orders\": {",
                      "            \"type\": \"array\",",
                      "        },",
                      "    },",
                      "    \"required\": [",
                      "        \"total\",",
                      "        \"orders\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/orders?customerNumber=148",
                  "host": ["{{host}}"],
                  "path": ["orders"],
                  "query": [
                    {
                      "key": "customerNumber",
                      "value": "148"
                    },
                    {
                      "key": "status",
                      "value": "Shipped",
                      "disabled": true
                    },
                    {
                      "key": "requiredDate",
                      "value": "desc",
                      "disabled": true
                    },
                    {
                      "key": "shippedDate",
                      "value": "desc",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get orders of customer - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"message\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Customer not found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/orders?customerNumber=1412112",
                  "host": ["{{host}}"],
                  "path": ["orders"],
                  "query": [
                    {
                      "key": "customerNumber",
                      "value": "1412112"
                    },
                    {
                      "key": "status",
                      "value": "Shipped",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create order - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Create order - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and no update customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"order\": {\"type\": \"object\"}",
                      "    },",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10428,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"customerNumber\": 103,\n    \"update\": null,\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and update customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"order\": { \"type\": \"object\" }",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"order\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10429,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"customerNumber\": 103,\n    \"update\": {\n        \"customerName\": \"Iam jus update\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"0123456789\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and create customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10430,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ],\n    \"customerNumber\": 497,\n    \"create\": {\n        \"customerNumber\": 497,\n        \"customerName\": \"Atelier graphique\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"40.32.2555\",\n        \"addressLine1\": \"54, rue Royale\",\n        \"addressLine2\": null,\n        \"city\": \"Nantes\",\n        \"state\": null,\n        \"postalCode\": \"44000\",\n        \"country\": \"France\",\n        \"salesRepEmployeeNumber\": 1370,\n        \"creditLimit\": 21000\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order & create C - create customer failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"message\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Duplicate data of customer number\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10431,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ],\n    \"customerNumber\": 497,\n    \"create\": {\n        \"customerNumber\": 497,\n        \"customerName\": \"Atelier graphique\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"40.32.2555\",\n        \"addressLine1\": \"54, rue Royale\",\n        \"addressLine2\": null,\n        \"city\": \"Nantes\",\n        \"state\": null,\n        \"postalCode\": \"44000\",\n        \"country\": \"France\",\n        \"salesRepEmployeeNumber\": 1370,\n        \"creditLimit\": 21000\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and create customer - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(!valid).to.be.true;",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10429,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ],\n    \"customerNumber\": 497,\n    \"create\": {\n        \"customerNumber\": 497,\n        \"customerName\": \"Atelier graphique\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"40.32.2555\",\n        \"addressLine1\": \"54, rue Royale\",\n        \"addressLine2\": null,\n        \"city\": \"Nantes\",\n        \"state\": null,\n        \"postalCode\": \"44000\",\n        \"country\": \"France\",\n        \"salesRepEmployeeNumber\": 1370,\n        \"creditLimit\": 21000\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Get  order by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Get order by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"orderNumber\": { \"type\": \"number\" },",
                      "        \"orderDate\": { \"type\": \"string\" },",
                      "        \"requiredDate\": { \"type\": \"string\" },",
                      "        \"shippedDate\": { \"type\": [\"string\", \"null\"] },",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"comments\": { \"type\": \"string\" },",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "        \"orderdetails\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"orderNumber\": { \"type\": \"number\" },",
                      "                    \"productCode\": { \"type\": \"string\" },",
                      "                    \"quantityOrdered\": { \"type\": \"number\" },",
                      "                    \"priceEach\": { \"type\": \"number\" },",
                      "                    \"orderLineNumber\": { \"type\": \"number\" },",
                      "                }",
                      "            }",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"orderNumber\",",
                      "        \"orderDate\",",
                      "        \"requiredDate\",",
                      "        \"shippedDate\",",
                      "        \"status\",",
                      "        \"comments\",",
                      "        \"customerNumber\",",
                      "        \"orderdetails\",",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(!valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10428",
                  "host": ["{{host}}"],
                  "path": ["orders", "10428"]
                }
              },
              "response": []
            },
            {
              "name": "Get order by number- not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(!valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Could not find order with order number 10429222\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429222",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429222"]
                }
              },
              "response": []
            },
            {
              "name": "Update order by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Update order by number - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"a\": \"On Hold\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Update order by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"orderNumber\": { \"type\": \"number\" },",
                      "        \"orderDate\": { \"type\": \"string\" },",
                      "        \"requiredDate\": { \"type\": \"string\" },",
                      "        \"shippedDate\": { \"type\": [\"string\", \"null\"] },",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"comments\": { \"type\": \"string\" },",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"orderNumber\",",
                      "        \"orderDate\",",
                      "        \"requiredDate\",",
                      "        \"shippedDate\",",
                      "        \"status\",",
                      "        \"comments\",",
                      "        \"customerNumber\",",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(!valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"Shipped\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Update order by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Could not find order with order number 10429222\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"On Hold\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429222",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429222"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number 10428 - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10428",
                  "host": ["{{host}}"],
                  "path": ["orders", "10428"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number 10429 - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": ["", "", "", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number 10430 - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10430",
                  "host": ["{{host}}"],
                  "path": ["orders", "10430"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"No order has been deleted\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            }
          ]
        }
      ],
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{tokenManager}}",
            "type": "string"
          }
        ]
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "Staff",
      "item": [
        {
          "name": "register & login",
          "item": [
            {
              "name": "URL not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/abc",
                  "host": ["{{host}}"],
                  "path": ["abc"]
                }
              },
              "response": []
            },
            {
              "name": "Login - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"admin111\",\n    \"password\": \"Pass@1234\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Login - wrong login info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schemaLoginFailed = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schemaLoginFailed);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Failed status schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"admin111\",\n    \"password\": \"Pass@1234\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Login - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"token\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('token has 3 parts', function (){",
                      "    const t = jsonData.token.split('.');",
                      "",
                      "    pm.expect(t.length).to.eql(3);",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"tokenStaff\", jsonData.token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"staff1702\",\n    \"password\": \"Pass@1234\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Register - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 114,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": \"asb\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - data ref not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test1asas\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 1191111\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test168\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 168\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Register - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"test168\",\n    \"password\": \"Pass@1234\",\n    \"customerNumber\": 168\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "offices",
          "item": [
            {
              "name": "Get all offices - Forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Create office - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"officeCode\": \"8\",\n    \"city\": \"London\",\n    \"phone\": \"+44 20 7877 2041\",\n    \"addressLine1\": \"25 Old Broad Street\",\n    \"addressLine2\": \"Level 7\",\n    \"state\": null,\n    \"country\": \"UK\",\n    \"postalCode\": \"EC2N 1HN\",\n    \"territory\": \"EMEA\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Update office by code - Forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/8",
                  "host": ["{{host}}"],
                  "path": ["offices", "8"]
                }
              },
              "response": []
            },
            {
              "name": "Delete office by code - Forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices/8",
                  "host": ["{{host}}"],
                  "path": ["offices", "8"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "employees",
          "item": [
            {
              "name": "Create employee - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": 3,\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Get employee by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/1",
                  "host": ["{{host}}"],
                  "path": ["employees", "1"]
                }
              },
              "response": []
            },
            {
              "name": "Update employee by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/1211212",
                  "host": ["{{host}}"],
                  "path": ["employees", "1211212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete employee by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/1212",
                  "host": ["{{host}}"],
                  "path": ["employees", "1212"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "customers",
          "item": [
            {
              "name": "Create customer - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"result\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"customerNumber\": { \"type\": \"number\" },",
                      "                \"customerName\": { \"type\": \"string\" },",
                      "                \"contactLastName\": { \"type\": \"string\" },",
                      "                \"contactFirstName\": { \"type\": \"string\" },",
                      "                \"phone\": { \"type\": \"string\" },",
                      "                \"addressLine1\": { \"type\": \"string\" },",
                      "                \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "                \"city\": { \"type\": \"string\" },",
                      "                \"state\": { \"type\": [\"string\", \"null\"] },",
                      "                \"postalCode\": { \"type\": \"string\" },",
                      "                \"country\": { \"type\": \"string\" },",
                      "                \"salesRepEmployeeNumber\": { \"type\": \"number\" },",
                      "                \"creditLimit\": { \"type\": \"number\" },",
                      "                \"role\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "                \"customerNumber\",",
                      "                \"customerName\",",
                      "                \"contactLastName\",",
                      "                \"contactFirstName\",",
                      "                \"phone\",",
                      "                \"addressLine1\",",
                      "                \"addressLine2\",",
                      "                \"city\",",
                      "                \"state\",",
                      "                \"postalCode\",",
                      "                \"country\",",
                      "                \"salesRepEmployeeNumber\",",
                      "                \"creditLimit\",",
                      "                \"role\"",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"result\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerNumber\": 999,\n    \"customerName\": \"Atelier graphique\",\n    \"contactLastName\": \"Schmitt\",\n    \"contactFirstName\": \"Carine \",\n    \"phone\": \"40.32.2555\",\n    \"addressLine1\": \"54, rue Royale\",\n    \"addressLine2\": null,\n    \"city\": \"Nantes\",\n    \"state\": null,\n    \"postalCode\": \"44000\",\n    \"country\": \"France\",\n    \"salesRepEmployeeNumber\": 1702,\n    \"creditLimit\": 21000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Create customer - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Duplicate data of customer number\");",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerNumber\": 999,\n    \"customerName\": \"Atelier graphique\",\n    \"contactLastName\": \"Schmitt\",\n    \"contactFirstName\": \"Carine \",\n    \"phone\": \"40.32.2555\",\n    \"addressLine1\": \"54, rue Royale\",\n    \"addressLine2\": null,\n    \"city\": \"Nantes\",\n    \"state\": null,\n    \"postalCode\": \"44000\",\n    \"country\": \"France\",\n    \"salesRepEmployeeNumber\": 1702,\n    \"creditLimit\": 21000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Get  customer by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/999",
                  "host": ["{{host}}"],
                  "path": ["customers", "999"]
                }
              },
              "response": []
            },
            {
              "name": "Get customer by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "        \"customerName\": { \"type\": \"string\" },",
                      "        \"contactLastName\": { \"type\": \"string\" },",
                      "        \"contactFirstName\": { \"type\": \"string\" },",
                      "        \"phone\": { \"type\": \"string\" },",
                      "        \"addressLine1\": { \"type\": \"string\" },",
                      "        \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "        \"city\": { \"type\": \"string\" },",
                      "        \"state\": { \"type\": [\"string\", \"null\"] },",
                      "        \"postalCode\": { \"type\": \"string\" },",
                      "        \"country\": { \"type\": \"string\" },",
                      "        \"salesRepEmployeeNumber\": { \"type\": \"number\" },",
                      "        \"creditLimit\": { \"type\": \"number\" },",
                      "        \"role\": { \"type\": \"number\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"customerNumber\",",
                      "        \"customerName\",",
                      "        \"contactLastName\",",
                      "        \"contactFirstName\",",
                      "        \"phone\",",
                      "        \"addressLine1\",",
                      "        \"addressLine2\",",
                      "        \"city\",",
                      "        \"state\",",
                      "        \"postalCode\",",
                      "        \"country\",",
                      "        \"salesRepEmployeeNumber\",",
                      "        \"creditLimit\",",
                      "        \"role\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/999",
                  "host": ["{{host}}"],
                  "path": ["customers", "999"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/999",
                  "host": ["{{host}}"],
                  "path": ["customers", "999"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"as\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/999",
                  "host": ["{{host}}"],
                  "path": ["customers", "999"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "        \"customerName\": { \"type\": \"string\" },",
                      "        \"contactLastName\": { \"type\": \"string\" },",
                      "        \"contactFirstName\": { \"type\": \"string\" },",
                      "        \"phone\": { \"type\": \"string\" },",
                      "        \"addressLine1\": { \"type\": \"string\" },",
                      "        \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "        \"city\": { \"type\": \"string\" },",
                      "        \"state\": { \"type\": [\"string\", \"null\"] },",
                      "        \"postalCode\": { \"type\": \"string\" },",
                      "        \"country\": { \"type\": \"string\" },",
                      "        \"salesRepEmployeeNumber\": { \"type\": \"number\" },",
                      "        \"creditLimit\": { \"type\": \"number\" },",
                      "        \"role\": { \"type\": \"number\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"customerNumber\",",
                      "        \"customerName\",",
                      "        \"contactLastName\",",
                      "        \"contactFirstName\",",
                      "        \"phone\",",
                      "        \"addressLine1\",",
                      "        \"addressLine2\",",
                      "        \"city\",",
                      "        \"state\",",
                      "        \"postalCode\",",
                      "        \"country\",",
                      "        \"salesRepEmployeeNumber\",",
                      "        \"creditLimit\",",
                      "        \"role\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerName\": \"Atelier graphique UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/999",
                  "host": ["{{host}}"],
                  "path": ["customers", "999"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Not Found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerName\": \"Atelier graphique UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/1211212",
                  "host": ["{{host}}"],
                  "path": ["customers", "1211212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete customer by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/1212",
                  "host": ["{{host}}"],
                  "path": ["customers", "1212"]
                }
              },
              "response": []
            },
            {
              "name": "Delete customer by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/999",
                  "host": ["{{host}}"],
                  "path": ["customers", "999"]
                }
              },
              "response": []
            },
            {
              "name": "Delete customer by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Not Found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/999",
                  "host": ["{{host}}"],
                  "path": ["customers", "999"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "productlines",
          "item": [
            {
              "name": "Create productline - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": 1234,\n    \"textDescription\": \"Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.\",\n    \"htmlDescription\": null,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"productLine\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"textDescription\": { \"type\": \"string\" },",
                      "                \"htmlDescription\": { \"type\": [\"string\", \"null\"] },",
                      "                \"image\": { \"type\": [\"string\", \"null\"] },",
                      "            },",
                      "            \"required\": [",
                      "                \"productLine\",",
                      "                \"textDescription\",",
                      "                \"htmlDescription\",",
                      "                \"image\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"productLine\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": \"New Product Line\",\n    \"textDescription\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Eveniet beatae saepe obcaecati itaque soluta, libero minima a. Quibusdam nostrum quasi accusamus soluta eum aspernatur omnis repellat dolores. Architecto, molestias eveniet.\",\n    \"htmlDescription\": null,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": \"New Product Line\",\n    \"textDescription\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Eveniet beatae saepe obcaecati itaque soluta, libero minima a. Quibusdam nostrum quasi accusamus soluta eum aspernatur omnis repellat dolores. Architecto, molestias eveniet.\",\n    \"htmlDescription\": null,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productLine\": \"New Product Line\",\n    \"textDescription\": \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Eveniet beatae saepe obcaecati itaque soluta, libero minima a. Quibusdam nostrum quasi accusamus soluta eum aspernatur omnis repellat dolores. Architecto, molestias eveniet.\",\n    \"htmlDescription\": 1,\n    \"image\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"productLine\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"textDescription\": { \"type\": \"string\" },",
                      "                \"htmlDescription\": { \"type\": [\"string\", \"null\"] },",
                      "                \"image\": { \"type\": [\"string\", \"null\"] },",
                      "            },",
                      "            \"required\": [",
                      "                \"productLine\",",
                      "                \"textDescription\",",
                      "                \"htmlDescription\",",
                      "                \"image\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"productLine\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"htmlDescription\": \"UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Update productLine failed\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"htmlDescription\": \"UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line1",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line1"]
                }
              },
              "response": []
            },
            {
              "name": "Delete productline by name - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Delete productline by name - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Delete productline by name - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Could not delete product line\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "products",
          "item": [
            {
              "name": "Create product - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"product\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productCode\": { \"type\": \"string\" },",
                      "                \"productName\": { \"type\": \"string\" },",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"productScale\": { \"type\": \"string\" },",
                      "                \"productVendor\": { \"type\": \"string\" },",
                      "                \"productDescription\": { \"type\": \"string\" },",
                      "                \"quantityInStock\": { \"type\": \"number\" },",
                      "                \"buyPrice\": { \"type\": \"number\" },",
                      "                \"MSRP\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "               \"productCode\",",
                      "                \"productName\",",
                      "                \"productLine\",",
                      "                \"productScale\",",
                      "                \"productVendor\",",
                      "                \"productDescription\",",
                      "                \"quantityInStock\",",
                      "                \"buyPrice\",",
                      "                \"MSRP\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"product\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productCode\": \"S10_5004\",\n  \"productName\": \"productName\",\n  \"productLine\": \"Classic Cars\",\n  \"productScale\": \"1:10\",\n  \"productVendor\": \"productVendor\",\n  \"productDescription\": \"productDescription\",\n  \"quantityInStock\": 100,\n  \"buyPrice\": 1.00,\n  \"MSRP\": 2.00\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"status\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Duplicate info product code.\");",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productCode\": \"S10_5004\",\n  \"productName\": \"productName\",\n  \"productLine\": \"Classic Cars\",\n  \"productScale\": \"1:10\",\n  \"productVendor\": \"productVendor\",\n  \"productDescription\": \"productDescription\",\n  \"quantityInStock\": 100,\n  \"buyPrice\": 1.00,\n  \"MSRP\": 2.00\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Get  product by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Get product by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"product\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productCode\": { \"type\": \"string\" },",
                      "                \"productName\": { \"type\": \"string\" },",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"productScale\": { \"type\": \"string\" },",
                      "                \"productVendor\": { \"type\": \"string\" },",
                      "                \"productDescription\": { \"type\": \"string\" },",
                      "                \"quantityInStock\": { \"type\": \"number\" },",
                      "                \"buyPrice\": { \"type\": \"number\" },",
                      "                \"MSRP\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "               \"productCode\",",
                      "                \"productName\",",
                      "                \"productLine\",",
                      "                \"productScale\",",
                      "                \"productVendor\",",
                      "                \"productDescription\",",
                      "                \"quantityInStock\",",
                      "                \"buyPrice\",",
                      "                \"MSRP\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"product\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Get product by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Can not find product with code S10_5004asas\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004asas",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004asas"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"as\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"product\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"productCode\": { \"type\": \"string\" },",
                      "                \"productName\": { \"type\": \"string\" },",
                      "                \"productLine\": { \"type\": \"string\" },",
                      "                \"productScale\": { \"type\": \"string\" },",
                      "                \"productVendor\": { \"type\": \"string\" },",
                      "                \"productDescription\": { \"type\": \"string\" },",
                      "                \"quantityInStock\": { \"type\": \"number\" },",
                      "                \"buyPrice\": { \"type\": \"number\" },",
                      "                \"MSRP\": { \"type\": \"number\" },",
                      "            },",
                      "            \"required\": [",
                      "               \"productCode\",",
                      "                \"productName\",",
                      "                \"productLine\",",
                      "                \"productScale\",",
                      "                \"productVendor\",",
                      "                \"productDescription\",",
                      "                \"quantityInStock\",",
                      "                \"buyPrice\",",
                      "                \"MSRP\",",
                      "            ]",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"product\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productName\": \"Name Update\",\n  \"MSRP\": 1000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Can not find product with code S10_5004asas\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productName\": \"Name Update\",\n    \"MSRP\": 1000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004asas",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004asas"]
                }
              },
              "response": []
            },
            {
              "name": "Delete product by code - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"+44 123 432\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Delete product by code - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Delete product by code - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Can not find product with code S10_5004\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenStaff}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Customer",
      "item": [
        {
          "name": "register & login",
          "item": [
            {
              "name": "Login - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"customer103\",\n    \"password\": \"Pass@1234\",\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Login - wrong login info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schemaLoginFailed = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schemaLoginFailed);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Failed status schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"customer103\",\n    \"password\": \"123456\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Login - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"token\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('token has 3 parts', function (){",
                      "    const t = jsonData.token.split('.');",
                      "",
                      "    pm.expect(t.length).to.eql(3);",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"tokenCustomer\", jsonData.token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenManager}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"customer103\",\n    \"password\": \"Pass@1234\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/login",
                  "host": ["{{host}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Register - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"customer501\",\n    \"password\": \"Pass@1234\",\n    \"customer\": {\n        \"customerNumber\": 500,\n        \"customerName\": \"Atelier graphique\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"40.32.2555\",\n        \"addressLine1\": \"54, rue Royale\",\n        \"addressLine2\": null,\n        \"city\": \"Nantes\",\n        \"state\": null,\n        \"postalCode\": \"44000\",\n        \"country\": \"France\",\n        \"salesRepEmployeeNumber\": 123618736128,\n        \"creditLimit\": 21000\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/register",
                  "host": ["{{host}}"],
                  "path": ["register"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "offices - forbidden",
          "item": [
            {
              "name": "Get offices - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Get office by code - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices/1",
                  "host": ["{{host}}"],
                  "path": ["offices", "1"]
                }
              },
              "response": []
            },
            {
              "name": "Create office - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/offices",
                  "host": ["{{host}}"],
                  "path": ["offices"]
                }
              },
              "response": []
            },
            {
              "name": "Update office by code - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices/1",
                  "host": ["{{host}}"],
                  "path": ["offices", "1"]
                }
              },
              "response": []
            },
            {
              "name": "Delete office by code - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{host}}/offices/1",
                  "host": ["{{host}}"],
                  "path": ["offices", "1"]
                }
              },
              "response": []
            },
            {
              "name": "Get employee by number - bad request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jobTitle\": \"Manager\",\n    \"role\": 2,\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/employees/3",
                  "host": ["{{host}}"],
                  "path": ["employees", "3"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "employees - forbidden",
          "item": [
            {
              "name": "Get employees - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Get employee by number - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/employees/1",
                  "host": ["{{host}}"],
                  "path": ["employees", "1"]
                }
              },
              "response": []
            },
            {
              "name": "Create employee - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{host}}/employees",
                  "host": ["{{host}}"],
                  "path": ["employees"]
                }
              },
              "response": []
            },
            {
              "name": "Update by number - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "url": {
                  "raw": "{{host}}/employees/1",
                  "host": ["{{host}}"],
                  "path": ["employees", "1"]
                }
              },
              "response": []
            },
            {
              "name": "Delete by number - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{host}}/employees/1",
                  "host": ["{{host}}"],
                  "path": ["employees", "1"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "customers",
          "item": [
            {
              "name": "Create customer - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerNumber\": 498,\n    \"customerName\": \"Atelier graphique\",\n    \"contactLastName\": \"Schmitt\",\n    \"contactFirstName\": \"Carine \",\n    \"phone\": \"40.32.2555\",\n    \"addressLine1\": \"54, rue Royale\",\n    \"addressLine2\": null,\n    \"city\": \"Nantes\",\n    \"state\": null,\n    \"postalCode\": \"44000\",\n    \"country\": \"France\",\n    \"salesRepEmployeeNumber\": 1370,\n    \"creditLimit\": 21000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers",
                  "host": ["{{host}}"],
                  "path": ["customers"]
                }
              },
              "response": []
            },
            {
              "name": "Get  customer by number - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/497",
                  "host": ["{{host}}"],
                  "path": ["customers", "497"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"city\": \"New YorK\",\n    \"phone\": \"as\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/103",
                  "host": ["{{host}}"],
                  "path": ["customers", "103"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"customerNumber\": { \"type\": \"number\" },",
                      "        \"customerName\": { \"type\": \"string\" },",
                      "        \"contactLastName\": { \"type\": \"string\" },",
                      "        \"contactFirstName\": { \"type\": \"string\" },",
                      "        \"phone\": { \"type\": \"string\" },",
                      "        \"addressLine1\": { \"type\": \"string\" },",
                      "        \"addressLine2\": { \"type\": [\"string\", \"null\"] },",
                      "        \"city\": { \"type\": \"string\" },",
                      "        \"state\": { \"type\": [\"string\", \"null\"] },",
                      "        \"postalCode\": { \"type\": \"string\" },",
                      "        \"country\": { \"type\": \"string\" },",
                      "        \"salesRepEmployeeNumber\": { \"type\": \"number\" },",
                      "        \"creditLimit\": { \"type\": \"number\" },",
                      "        \"role\": { \"type\": \"number\" },",
                      "    },",
                      "    \"required\": [",
                      "        \"customerNumber\",",
                      "        \"customerName\",",
                      "        \"contactLastName\",",
                      "        \"contactFirstName\",",
                      "        \"phone\",",
                      "        \"addressLine1\",",
                      "        \"addressLine2\",",
                      "        \"city\",",
                      "        \"state\",",
                      "        \"postalCode\",",
                      "        \"country\",",
                      "        \"salesRepEmployeeNumber\",",
                      "        \"creditLimit\",",
                      "        \"role\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerName\": \"Atelier graphique UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/103",
                  "host": ["{{host}}"],
                  "path": ["customers", "103"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Not Found\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerName\": \"Atelier graphique UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/1211212",
                  "host": ["{{host}}"],
                  "path": ["customers", "1211212"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer by number - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"customerName\": \"Atelier graphique UPDATE\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/114",
                  "host": ["{{host}}"],
                  "path": ["customers", "114"]
                }
              },
              "response": []
            },
            {
              "name": "Delete customer by number - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/customers/103",
                  "host": ["{{host}}"],
                  "path": ["customers", "103"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "productlines",
          "item": [
            {
              "name": "Get productlines - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"total\": { \"type\": \"number\" },",
                      "        \"productLines\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"productLine\": { \"type\": \"string\" },",
                      "                    \"textDescription\": { \"type\": \"string\" },",
                      "                    \"htmlDescription\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"image\": { \"type\": [\"string\", \"null\"] },",
                      "                },",
                      "                \"required\": [",
                      "                    \"productLine\",",
                      "                    \"textDescription\",",
                      "                    \"htmlDescription\",",
                      "                    \"image\",",
                      "                ]",
                      "            }",
                      "        },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"message\",",
                      "        \"productLines\",",
                      "        \"total\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Create productline - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines",
                  "host": ["{{host}}"],
                  "path": ["productlines"]
                }
              },
              "response": []
            },
            {
              "name": "Update productline by name - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            },
            {
              "name": "Delete productline by name - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/productlines/New Product Line",
                  "host": ["{{host}}"],
                  "path": ["productlines", "New Product Line"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "products",
          "item": [
            {
              "name": "Get products - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"products\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"productCode\": { \"type\": \"string\" },",
                      "                    \"productName\": { \"type\": \"string\" },",
                      "                    \"productLine\": { \"type\": \"string\" },",
                      "                    \"productScale\": { \"type\": \"string\" },",
                      "                    \"productVendor\": { \"type\": \"string\" },",
                      "                    \"productDescription\": { \"type\": \"string\" },",
                      "                    \"quantityInStock\": { \"type\": \"number\" },",
                      "                    \"buyPrice\": { \"type\": \"number\" },",
                      "                    \"MSRP\": { \"type\": \"number\" },",
                      "                },",
                      "                \"required\": [",
                      "                    \"productCode\",",
                      "                    \"productName\",",
                      "                    \"productLine\",",
                      "                    \"productScale\",",
                      "                    \"productVendor\",",
                      "                    \"productDescription\",",
                      "                    \"quantityInStock\",",
                      "                    \"buyPrice\",",
                      "                    \"MSRP\",",
                      "                ]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"products\",",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Create product - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products",
                  "host": ["{{host}}"],
                  "path": ["products"]
                }
              },
              "response": []
            },
            {
              "name": "Update product by code - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            },
            {
              "name": "Delete product by code - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/products/S10_5004",
                  "host": ["{{host}}"],
                  "path": ["products", "S10_5004"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "orders - delete order 10428 in next test",
          "item": [
            {
              "name": "Get All orders -OK",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{host}}/orders?customerNumber=103",
                  "host": ["{{host}}"],
                  "path": ["orders"],
                  "query": [
                    {
                      "key": "customerNumber",
                      "value": "103"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create order - validate failed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"error\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"validation\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"query\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"body\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "                \"params\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"source\": { \"type\": \"string\" },",
                      "                        \"keys\": { \"type\": \"array\" },",
                      "                        \"message\": { \"type\": \"string\" },",
                      "                    },",
                      "                },",
                      "            },",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"error\", \"message\", \"validation\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"employeeNumber\": \"ba\",\n    \"lastName\": \"Gerard\",\n    \"firstName\": \"Martin\",\n    \"extension\": \"x2312\",\n    \"email\": \"a1@example.com\",\n    \"officeCode\": \"4\",\n    \"reportsTo\": 1102,\n    \"jobTitle\": \"Staff\",\n    \"role\": 3\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and update customer - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "",
                      "    },",
                      "    \"required\": [",
                      "        \"status\",",
                      "        \"message\"",
                      "    ]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10428,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"customerNumber\": 103,\n    \"update\": {\n        \"customerName\": \"Iam jus update\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"0123456789\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and update customer - duplicate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10428,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"customerNumber\": 103,\n    \"update\": {\n        \"customerName\": \"Iam jus update\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"0123456789\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order and update customer - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10429,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"customerNumber\": 114,\n    \"update\": {\n        \"customerName\": \"Iam jus update\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"0123456789\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Create order & create  customer - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"orderNumber\": 10430,\n        \"requiredDate\": \"2021-12-30\",\n        \"comments\": \"Hi there\"\n    },\n    \"orderDetails\": [\n        {\n            \"productCode\": \"S10_1678\",\n            \"quantityOrdered\": 50,\n            \"priceEach\": 48.81\n        },\n        {\n            \"productCode\": \"S18_2957\",\n            \"quantityOrdered\": 42,\n            \"priceEach\": 59.34\n        }\n    ],\n    \"customerNumber\": 497,\n    \"create\": {\n        \"customerNumber\": 497,\n        \"customerName\": \"Atelier graphique\",\n        \"contactLastName\": \"Schmitt\",\n        \"contactFirstName\": \"Carine \",\n        \"phone\": \"40.32.2555\",\n        \"addressLine1\": \"54, rue Royale\",\n        \"addressLine2\": null,\n        \"city\": \"Nantes\",\n        \"state\": null,\n        \"postalCode\": \"44000\",\n        \"country\": \"France\",\n        \"salesRepEmployeeNumber\": 1370,\n        \"creditLimit\": 21000\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders",
                  "host": ["{{host}}"],
                  "path": ["orders"]
                }
              },
              "response": []
            },
            {
              "name": "Get order by number - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10123",
                  "host": ["{{host}}"],
                  "path": ["orders", "10123"]
                }
              },
              "response": []
            },
            {
              "name": "Get order by number- not found",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429222",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429222"]
                }
              },
              "response": []
            },
            {
              "name": "Get order by number- forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"message\", \"status\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Should correct message\", function () {",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden.\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10425",
                  "host": ["{{host}}"],
                  "path": ["orders", "10425"]
                }
              },
              "response": []
            },
            {
              "name": "Update order by number - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"Cancelled\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10425",
                  "host": ["{{host}}"],
                  "path": ["orders", "10425"]
                }
              },
              "response": []
            },
            {
              "name": "Delete order by number - forbidden",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const Ajv = require('ajv');",
                      "const ajv = new Ajv();",
                      "",
                      "const schema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"status\": { \"type\": \"string\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "    },",
                      "    \"required\": [\"status\", \"message\"]",
                      "};",
                      "",
                      "const validate = ajv.compile(schema);",
                      "",
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 403\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test('Schema is valid', function () {",
                      "    const valid = validate(jsonData)",
                      "    if (!valid) console.log(validate.errors)",
                      "    pm.expect(valid).to.be.true;",
                      "});",
                      "",
                      "pm.test('Should correct message', function (){",
                      "    pm.expect(jsonData.message).to.eql(\"Forbidden\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenCustomer}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/orders/10429",
                  "host": ["{{host}}"],
                  "path": ["orders", "10429"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Delete order by number 10428 - admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/orders/10428",
              "host": ["{{host}}"],
              "path": ["orders", "10428"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "host",
      "value": "http://localhost:5000"
    },
    {
      "key": "token",
      "value": ""
    },
    {
      "key": "tokenAuth",
      "value": ""
    },
    {
      "key": "tokenManager",
      "value": ""
    },
    {
      "key": "tokenCustomer",
      "value": ""
    },
    {
      "key": "tokenStaff",
      "value": ""
    }
  ]
}
