openapi: 3.0.0

info:
  title: NodeJS 02 - Assignment
  description: Just a RESTful APIs assignment
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Main server

paths:
  /customers/:
    summary: Get all or create customers
    get:
      summary: Return a (list of) customer(s).
      tags:
        - Customers
      parameters:
        - name: customerNumber
          in: query
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/CustomerResponse'
                  - $ref: '#/components/schemas/CustomerResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    post:
      summary: Create a customer.
      tags:
        - Customers
      requestBody:
        description: A full data form of customer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /customers/{:customerNumber}:
    summary: Get, or update, or delete a specific customer
    parameters:
      - name: customerNumber
        in: path
        schema:
          type: integer
        required: true
        example: 5
    get:
      summary: Get a customer data
      tags:
        - Customers
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    put:
      summary: Fully update a customer
      tags:
        - Customers
      requestBody:
        description: A full data form of customer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    patch: # DNF
      summary: Partially update a customer
      tags:
        - Customers
    delete:
      summary: Delete a customer
      tags:
        - Customers
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /employees/:
    summary: Get all or create employees
    get:
      summary: Get all employees
      tags:
        - Employees
      parameters:
        - name: employeeNumber
          in: query
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/EmployeeResponse'
                  - $ref: '#/components/schemas/EmployeeResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    post:
      summary: Create an employee
      tags:
        - Employees
      requestBody:
        summary: A full form data of employee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /employees/officeCode:
    summary: Get employees by officeCode
    get:
      summary: Get employees in office
      tags:
        - Employees
      parameters:
        - name: officeCode
          in: query
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/EmployeeResponse'
                  - $ref: '#/components/schemas/EmployeeResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /employees/{:employeeNumber}:
    summary: Get, or update, or delete a specific employee
    parameters:
      - name: employeeNumber
        in: path
        schema:
          type: integer
        required: true
    get:
      summary: Get an employee data
      tags:
        - Employees
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    put:
      summary: Fully update an employee
      tags:
        - Employees
      requestBody:
        summary: A full form data of employee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    patch: # DNF
      summary: Partially update an employee
      tags:
        - Employees
    delete:
      summary: Delete an employee
      tags:
        - Employees
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /users/register:
    summary: Create an user
    post:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /users/login:
    summary: Login
    post: # DNF
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/LoginResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
  /products/:
    summary: Get all or create products
    get:
      summary: Return a (list of) product(s).
      tags:
        - Products
      parameters:
        - name: productCode
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/ProductResponse'
                  - $ref: '#/components/schemas/ProductResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    post:
      summary: Create a product.
      tags:
        - Products
      requestBody:
        description: A full data form of product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /products/{:productCode}:
    summary: Get, or update, or delete a specific product
    parameters:
      - name: productCode
        in: path
        schema:
          type: string
        required: true
        example: 'S18_2870'
    get:
      summary: Get a product data
      tags:
        - Products
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    put:
      summary: Fully update a product
      tags:
        - Products
      requestBody:
        description: A full data form of product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    patch: # DNF
      summary: Partially update a product
      tags:
        - Products
    delete:
      summary: Delete a product
      tags:
        - Products
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /orders:
    summary: Get all or create orders
    get:
      summary: Return a (list of) order(s).
      tags:
        - Orders
      parameters:
        - name: orderNumber
          in: query
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/OrderResponse'
                  - $ref: '#/components/schemas/OrderResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    post:
      summary: Create a order.
      tags:
        - Orders
      requestBody:
        description: A full data form of order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /orders/{:orderNumber}:
    summary: Get, or update, or delete a specific order
    parameters:
      - name: orderNumber
        in: path
        schema:
          type: number
        required: true
        example: 10100
    get:
      summary: Get a order data
      tags:
        - Orders
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    put:
      summary: Fully update a order
      tags:
        - Orders
      requestBody:
        description: A full data form of order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    patch: # DNF
      summary: Partially update a order
      tags:
        - Orders
    delete:
      summary: Delete a order
      tags:
        - Orders
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
  /offices/:
    summary: Get all or create offices
    get:
      summary: Return a (list of) office(s).
      tags:
        - Offices
      parameters:
        - name: officeCode
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/Office'
                  - $ref: '#/components/schemas/Office'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    post:
      summary: Create a office.
      tags:
        - Offices
      requestBody:
        description: A full data form of office
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Office'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Office'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficeResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /offices/{:officeCode}:
    summary: Get, or update, or delete a specific office
    parameters:
      - name: officeCode
        in: path
        schema:
          type: string
        required: true
        example: 1
    get:
      summary: Get a office data
      tags:
        - Offices
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    put:
      summary: Fully update a office
      tags:
        - Offices
      requestBody:
        description: A full data form of office
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Office'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Office'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    patch: # DNF
      summary: Partially update a office
      tags:
        - Offices
    delete:
      summary: Delete a office
      tags:
        - Offices
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
  /payments/:
    summary: Get all or create payments
    get:
      summary: Return a (list of) payment(s).
      tags:
        - Payments
      parameters:
        - name: customerNumber, checkNumber
          in: query
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/Payment'
                  - $ref: '#/components/schemas/Payment'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    post:
      summary: Create a payment.
      tags:
        - Payments
      requestBody:
        description: A full data form of payment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
  /payments/{:customerNumber}:
    summary: Get, or update, or delete a specific payment
    parameters:
      - name: customerNumber
        in: path
        schema:
          type: integer
        required: true
        example: 1
    get:
      summary: Get a payment data
      tags:
        - Payments
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    put:
      summary: Fully update a payment
      tags:
        - Payments
      requestBody:
        description: A full data form of payment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    patch: # DNF
      summary: Partially update a payment
      tags:
        - Payments
    delete:
      summary: Delete a payment
      tags:
        - Payments
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /orderDetails/:
    summary: Get all or create orderDetails
    get:
      summary: Return a (list of) orderDetail(s).
      tags:
        - OrderDetails
      parameters:
        - name: orderNumber, productCode
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/OrderDetail'
                  - $ref: '#/components/schemas/OrderDetail'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    post:
      summary: Create a orderDetail.
      tags:
        - OrderDetails
      requestBody:
        description: A full data form of orderDetail
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetail'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /orderDetails/{:customerNumber}:
    summary: Get, or update, or delete a specific orderDetail
    parameters:
      - name: customerNumber
        in: path
        schema:
          type: integer
        required: true
        example: 1
    get:
      summary: Get a orderDetail data
      tags:
        - OrderDetails
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    put:
      summary: Fully update a orderDetail
      tags:
        - OrderDetails
      requestBody:
        description: A full data form of orderDetail
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetail'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    patch: # DNF
      summary: Partially update a orderDetail
      tags:
        - OrderDetails
    delete:
      summary: Delete a orderDetail
      tags:
        - OrderDetails
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
  /productLines/:
    summary: Get all or create productLines
    get:
      summary: Return a (list of) productLine(s).
      tags:
        - ProductLines
      parameters:
        - name: productLine
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/ProductLine'
                  - $ref: '#/components/schemas/ProductLine'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    post:
      summary: Create a productLine.
      tags:
        - ProductLines
      requestBody:
        description: A full data form of productLine
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductLine'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductLine'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLine'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

  /productLines/{:productLine}:
    summary: Get, or update, or delete a specific productLine
    parameters:
      - name: productLine
        in: path
        schema:
          type: string
        required: true
        example: 'Classic Cars'
    get:
      summary: Get a productLine data
      tags:
        - ProductLines
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLine'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    put:
      summary: Fully update a productLine
      tags:
        - ProductLines
      requestBody:
        description: A full data form of productLine
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductLine'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductLine'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductLine'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
    patch: # DNF
      summary: Partially update a productLine
      tags:
        - ProductLines
    delete:
      summary: Delete a productLine
      tags:
        - ProductLines
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
components:
  schemas:
    ProductLine:
      type: object
      properties:
        productLine:
          type: string
          required: true
          maxLength: 50
          example: 'Classic Cars'
        textDescription:
          type: string
          required: true
          maxLength: 4000
          example: 'Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb attention to detail and craftsmanship and offer features such as working steering system, opening forward compartment, opening rear trunk with removable spare wheel, 4-wheel independent spring suspension, and so on. The models range in size from 1:10 to 1:24 scale and include numerous limited edition and several out-of-production vehicles. All models include a certificate of authenticity from their manufacturers and come fully assembled and ready for display in the home or office.'
        htmlDescription:
          type: string
          minLength: 3
          maxLength: 50
          required: false
          example: null
        image:
          type: string
          minLength: 1
          maxLenght: 1e10
          required: false
          example: null
    OrderDetail:
      type: object
      properties:
        orderNumber:
          type: integer
          required: true
          example: 10100
        productCode:
          type: string
          required: true
          maxLength: 15
          example: 'S18_1749'
        quantityOrdered:
          type: integer
          minLength: 3
          maxLength: 50
          required: True
          example: 30
        priceEach:
          type: number
          minLength: 1
          maxLenght: 1e10
          required: True
          example: 136.00
    Payment:
      type: object
      properties:
        customerNumber:
          type: integer
          required: true
          example: 1
        checkNumber:
          type: string
          required: true
          example: 'HQ336336'
        paymentDate:
          type: date
          minLength: 3
          maxLength: 50
          required: True
          example: '2004-10-19'
        amount:
          type: integer
          minLength: 1
          maxLenght: 50
          required: True
          example: 23
    Office:
      type: object
      properties:
        officeCode:
          type: string
          required: true
          example: 1
        city:
          type: string
          minLength: 5
          maxLength: 100
          required: true
          example: 'San Francisco'
        phone:
          type: string
          minLength: 8
          maxLength: 50
          required: True
          example: '+1 650 219 4782'
        addressLine1:
          type: string
          minLength: 1
          maxLenght: 50
          required: True
          example: '100 Market Street'
        addressLine2:
          type: string
          minLength: 1
          maxLenght: 50
          required: True
          example: 'Suite 300'
        state:
          type: string
          required: True
          maxLength: 50
          example: 'CA'
        country:
          type: string
          required: True
          maxLength: 50
          example: 'USA'
        postalCode:
          type: string
          maxLength: 50
          required: True
          example: 94080
        territory:
          type: string
          maxLength: 10
          required: false
          example: EMEA
    orderResponse:
      type: object
      properties:
        officeCode:
          type: string
          required: true
          example: 1
        city:
          type: string
          minLength: 5
          maxLength: 100
          required: true
          example: 'San Francisco'
        phone:
          type: string
          minLength: 8
          maxLength: 50
          required: True
          example: '+1 650 219 4782'
        addressLine1:
          type: string
          minLength: 1
          maxLenght: 50
          required: True
          example: '100 Market Street'
        addressLine2:
          type: string
          minLength: 1
          maxLenght: 50
          required: True
          example: 'Suite 300'
        state:
          type: string
          required: True
          maxLength: 50
          example: 'CA'
        country:
          type: string
          required: True
          maxLength: 50
          example: 'USA'
        postalCode:
          type: string
          maxLength: 50
          required: True
          example: 94080
        territory:
          type: string
          maxLength: 10
          required: false
          example: EMEA
    Product:
      type: object
      properties:
        productCode:
          type: string
          required: true
          min: 1
          example: 'S12_4675'
        productName:
          type: string
          minLength: 5
          maxLength: 50
          required: true
          example: '1969 Dodge Charger'
        productLine:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: 'Classic Cars'
        productScale:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: '1:18'
        productVendor:
          type: string
          minLength: 8
          maxLength: 20
          required: true
          example: 'Red Start Diecast'
        productDescription:
          type: string
          minLength: 10
          maxLength: 50
          required: true
          example: 'Features include opening and closing doors. Color: Red'

        quantityInStock:
          type: string
          minLength: 1
          maxLength: 50
          required: true
          example: 8164
        buyPrice:
          type: number
          minLength: 1
          maxLength: 50
          required: true
          example: 56.76
        MSRP:
          type: number
          minLength: 1
          maxLength: 50
          required: true
          example: 132.00
    ProductResponse:
      type: object
      properties:
        productCode:
          type: string
          required: true
          min: 1
          example: 'S12_4675'
        productName:
          type: string
          minLength: 5
          maxLength: 50
          required: true
          example: '1969 Dodge Charger'
        productLine:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: 'Classic Cars'
        productScale:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: '1:18'
        productVendor:
          type: string
          minLength: 8
          maxLength: 20
          required: true
          example: 'Red Start Diecast'
        productDescription:
          type: string
          minLength: 10
          maxLength: 50
          required: true
          example: 'Features include opening and closing doors. Color: Red'

        quantityInStock:
          type: string
          minLength: 1
          maxLength: 50
          required: true
          example: 8164
        buyPrice:
          type: string
          minLength: 1
          maxLength: 50
          required: true
          example: 56.76
        MSRP:
          type: number
          minLength: 1
          maxLength: 50
          required: true
          example: 132.00
    Customer:
      type: object
      properties:
        customerNumber:
          type: integer
          required: true
          min: 1
          example: 100
        customerName:
          type: string
          minLength: 5
          maxLength: 50
          required: true
          example: 'John Doe'
        contactLastName:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: 'Doe'
        contactFirstName:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: 'John'
        phone:
          type: string
          minLength: 8
          maxLength: 20
          required: true
          example: '0123456789'
        addressLine1:
          type: string
          minLength: 10
          maxLength: 50
          required: true
          example: '12th floor, Block 40, Main Avenue, New York'
        addressLine2:
          type: string
          minLength: 10
          maxLength: 50
          nullable: true
          example: null
        city:
          type: string
          minLength: 2
          maxLength: 50
          required: true
          example: 'New York'
        state:
          type: string
          minLength: 2
          maxLength: 50
          nullable: true
          example: 'New York'
        postalCode:
          type: string
          minLength: 5
          maxLength: 15
          nullable: true
          example: '12345'
        country:
          type: string
          minLength: 2
          maxLength: 50
          required: true
          example: 'USA'
        salesRepEmployeeNumber:
          type: integer
          min: 1
          nullable: true
          example: 421
        creditLimit:
          description: Only accept format decimal(10,2)
          type: number
          nullable: true
          example: 1000.55
    CustomerResponse:
      type: object
      properties:
        customerNumber:
          type: integer
          required: true
          min: 1
          example: 100
        customerName:
          type: string
          minLength: 5
          maxLength: 50
          required: true
          example: 'John Doe'
        contactLastName:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: 'Doe'
        contactFirstName:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: 'John'
        phone:
          type: string
          minLength: 8
          maxLength: 20
          required: true
          example: '0123456789'
        addressLine1:
          type: string
          minLength: 10
          maxLength: 50
          required: true
          example: '12th floor, Block 40, Main Avenue, New York'
        addressLine2:
          type: string
          minLength: 10
          maxLength: 50
          nullable: true
          example: null
        city:
          type: string
          minLength: 2
          maxLength: 50
          required: true
          example: 'New York'
        state:
          type: string
          minLength: 2
          maxLength: 50
          nullable: true
          example: 'New York'
        postalCode:
          type: string
          minLength: 5
          maxLength: 15
          nullable: true
          example: '12345'
        country:
          type: string
          minLength: 2
          maxLength: 50
          required: true
          example: 'USA'
        salesRepEmployeeNumber:
          $ref: '#/components/schemas/Employee'
        creditLimit:
          description: Only accept format decimal(10,2)
          type: number
          nullable: true
          example: 1000.55
    Order:
      type: object
      properties:
        orderNumber:
          type: integer
          required: true
          min: 1
          example: 10010
        orderDate:
          type: date
          minLength: 5
          maxLength: 50
          required: true
          example: 2003-01-06
        requiredDate:
          type: date
          minLength: 1
          maxLength: 50
          required: True
          example: 2003-01-13
        shippedDate:
          type: date
          minLength: 1
          maxLenght: 50
          required: True
          example: 2003-01-13
        status:
          type: string
          maxLength: 15
          required: True
          example: True
        comments:
          type: string
          required: False
          maxLength: 4000
        customerNumber:
          type: integer
          required: True
          example: 363

    OrderResponse:
      type: object
      properties:
        orderNumber:
          type: integer
          required: true
          min: 1
          example: 10010
        orderDate:
          type: date
          minLength: 5
          maxLength: 50
          required: true
          example: 2003-01-06
        requiredDate:
          type: date
          minLength: 1
          maxLength: 50
          required: True
          example: 2003-01-13
        shippedDate:
          type: date
          minLength: 1
          maxLenght: 50
          required: True
          example: 2003-01-13
        status:
          type: string
          maxLength: 15
          required: True
          example: True
        comments:
          type: string
          required: False
          maxLength: 4000
        customerNumber:
          type: integer
          required: True
          example: 363
    Employee:
      type: object
      properties:
        employeeNumber:
          type: integer
          min: 1
          required: true
          example: 425
        lastName:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: 'Smith'
        firstName:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: 'Haley'
        extension:
          type: string
          maxLength: 50
          required: true
          example: 'Jr.'
        email:
          type: string
          format: email
          minLength: 10
          maxLength: 50
          required: true
          pattern: /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
          example: 'HaleySmith@company.com'
        officeCode:
          type: string
          maxLength: 10
          required: true
          example: 'NY'
        reportsTo:
          type: integer
          min: 1
          nullable: true
        jobTitle:
          type: string
          enum:
            - President
            - Manager
            - Leader
            - Staff
          required: true
          example: 'Staff'
    EmployeeResponse:
      type: object
      properties:
        employeeNumber:
          type: integer
          min: 1
          required: true
          example: 425
        lastName:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: 'Smith'
        firstName:
          type: string
          minLength: 3
          maxLength: 50
          required: true
          example: 'Haley'
        extension:
          type: string
          maxLength: 50
          required: true
          example: 'Jr.'
        email:
          type: string
          format: email
          minLength: 10
          maxLength: 50
          required: true
          pattern: /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
          example: 'HaleySmith@company.com'
        officeCode:
          type: string
          maxLength: 10
          required: true
          example: 'NY'
        reportsTo:
          $ref: '#/components/schemas/Employee'
        jobTitle:
          type: string
          enum:
            - President
            - Manager
            - Leader
            - Staff
          required: true
          example: 'Staff'
    User:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          required: true
          example: 'HaleyS'
        password:
          type: string
          minLength: 6
          maxLength: 100
          pattern: /(?=.*[0-9])(?=.*[!@#$%^&*?-_\/><;:'",|\\\.])/
          required: true
          example: '@val1dp@55w0rd'
        employeeNumber:
          type: integer
          min: 1
          required: true
          example: 425
    Login:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          required: true
          example: HaleyS
        password:
          type: string
          minLength: 6
          maxLength: 100
          required: true
          example: '@val1dp@55w0rd'
    Error400:
      type: object
      properties:
        error:
          type: string
          enum:
            [
              No data match,
              Invalid customerNumber,
              Invalid employeeNumber,
              Missing credential(s),
            ]
          required: true
          example: No data match
    ValidationError:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: Validation failed
        validation:
          type: object
          properties:
            body:
              type: object
              properties:
                source:
                  type: string
                  example: body
                keys:
                  type: array
                  items:
                    type: string
                    example: lastName
                message:
                  type: string
                  example: "'lastName' length must be at least 3 characters long"
    Error401:
      type: object
      properties:
        error:
          type: string
          enum: [Unauthorized]
          required: true
          example: Unauthorized
    Error403:
      type: object
      properties:
        error:
          type: string
          enum: [Forbidden]
          required: true
          example: Forbidden
    Error500:
      type: object
      properties:
        error:
          type: string
          required: true
          example: Internal server error
    DeleteResponse:
      type: object
      properties:
        success:
          type: string
          enum:
            - Successfully deleted 1 employee
            - Successfully deleted 1 customer
    RegisterResponse:
      type: object
      properties:
        success:
          type: string
          enum: [1 user created]
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        token:
          type: string
